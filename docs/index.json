{
  "api/CSF.Screenplay.Actor.html": {
    "href": "api/CSF.Screenplay.Actor.html",
    "title": "Class Actor | Screenplay docs",
    "keywords": "Class Actor Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll A representation of an autonomous, or at least seemingly-autonomous, person or system which directs the events of a IPerformance. public sealed class Actor : IHasAbilities, IHasName, IHasPerformanceIdentity, IDisposable, IHasPerformableEvents, ICanPerform, ICanPerformGiven, ICanPerformWhen, ICanPerformThen Inheritance object Actor Implements IHasAbilities IHasName IHasPerformanceIdentity IDisposable IHasPerformableEvents ICanPerform ICanPerformGiven ICanPerformWhen ICanPerformThen Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ActorExtensions.GetAbility(ICanPerform, Type) ActorExtensions.GetAbility<T>(ICanPerform) ActorExtensions.HasAbility(ICanPerform, Type) ActorExtensions.HasAbility<T>(ICanPerform) ActorExtensions.IsAbleTo(ICanPerform, object) ActorExtensions.HasAbility(IHasAbilities, Type) ActorExtensions.HasAbility<T>(IHasAbilities) Examples A good example of an actor, aside from a person, could be task scheduling software which executes logic at specific times of day. That is - provided that the task scheduling software itself is not a part of the Screenplay Performance. Within the context of such a performance, the task scheduler executing its logic at the configured time would appear to be an autonomous action because nothing else within the scope of the performance prompted it. Conversely, a mouse trap would be a poor example of an actor; a mouse trap acts only reactively. The creature entering the trap would be the actor in such a performance. Remarks An actor should represent an autonomous or semi-autonomous system. Most commonly is a human being using a piece of software. An actor might also represent an automated system which acts according to policy, so long as configuring/initating that system is not a part of the IPerformance. Within a performance, each performable item is executed in the context of the actor which performed it. Actors have abilities which provide them the means by which to interact with the software. A single conceptual actor must be represented by a single instance of this type; two actors of the same name are not considered to be the same actor, nor will they behave as such. Instances of actor should have an object lifetime which lasts for the remainder of the performance in which they were created. Instances of actor must not be shared across performances. In other words, they should be scoped to only a single performance. A single performance might involve only one actor or it might involve many. If a performance makes use of multiple actors, the developer should consider making use of either or both of the ICast and/or IStage, which assist in the management of multiple actors. Constructors Actor(string, Guid) Initialises a new instance of Actor public Actor(string name, Guid performanceIdentity) Parameters name string The actor's name performanceIdentity Guid A unique identity for the performance Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Events BeginPerformable Occurs when the actor begins the execution of a performable object. public event EventHandler<PerformableEventArgs> BeginPerformable Event Type EventHandler<PerformableEventArgs> EndPerformable Occurs when an actor ends the execution of a performable object. public event EventHandler<PerformableEventArgs> EndPerformable Event Type EventHandler<PerformableEventArgs> GainedAbility Occurs when an actor gains a new ability. public event EventHandler<GainAbilityEventArgs> GainedAbility Event Type EventHandler<GainAbilityEventArgs> PerformableFailed Occurs when a performable object fails with an exception. public event EventHandler<PerformableFailureEventArgs> PerformableFailed Event Type EventHandler<PerformableFailureEventArgs> PerformableResult Occurs when an actor receives a result from a perfperformable objectrmance. public event EventHandler<PerformableResultEventArgs> PerformableResult Event Type EventHandler<PerformableResultEventArgs> See Also IPerformance ICast IStage"
  },
  "api/CSF.Screenplay.ActorExtensions.html": {
    "href": "api/CSF.Screenplay.ActorExtensions.html",
    "title": "Class ActorExtensions | Screenplay docs",
    "keywords": "Class ActorExtensions Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll Extension methods for actor types public static class ActorExtensions Inheritance object ActorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAbility(ICanPerform, Type) Gets the first ability which the actor has of the specified type public static object GetAbility(this ICanPerform actor, Type abilityType) Parameters actor ICanPerform The actor from whom to get the ability abilityType Type The type of ability desired Returns object The ability instance Exceptions ArgumentNullException If any parameter is null ArgumentException If the actor does not implement IHasAbilities InvalidOperationException If the actor does not have an ability which is or derives from abilityType GetAbility<T>(ICanPerform) Gets the first ability which the actor has of the specified type public static T GetAbility<T>(this ICanPerform actor) Parameters actor ICanPerform The actor from whom to get the ability Returns T The ability instance Type Parameters T The type of ability desired Exceptions ArgumentNullException If the actor is null ArgumentException If the actor does not implement IHasAbilities InvalidOperationException If the actor does not have an ability which is or derives from T HasAbility(ICanPerform, Type) Gets a value which indicates if the actor has an ability of the specified type. public static bool HasAbility(this ICanPerform actor, Type abilityType) Parameters actor ICanPerform An actor abilityType Type The ability type for which to test Returns bool true if the actor has an ability of the specified abilityType; false if not. Remarks This method will also return false if the actor does not implement IHasAbilities. HasAbility(IHasAbilities, Type) Gets a value which indicates if the actor has an ability of the specified type. public static bool HasAbility(this IHasAbilities actor, Type abilityType) Parameters actor IHasAbilities An actor abilityType Type The ability type for which to test Returns bool true if the actor has an ability of the specified abilityType; false if not. HasAbility<T>(ICanPerform) Gets a value which indicates if the actor has an ability of the specified type. public static bool HasAbility<T>(this ICanPerform actor) Parameters actor ICanPerform An actor Returns bool true if the actor has an ability of the specified T; false if not. Type Parameters T The ability type for which to test Remarks This method will also return false if the actor does not implement IHasAbilities. HasAbility<T>(IHasAbilities) Gets a value which indicates if the actor has an ability of the specified type. public static bool HasAbility<T>(this IHasAbilities actor) Parameters actor IHasAbilities An actor Returns bool true if the actor has an ability of the specified T; false if not. Type Parameters T The ability type for which to test IsAbleTo(ICanPerform, object) Adds an ability to the specified actor public static void IsAbleTo(this ICanPerform actor, object ability) Parameters actor ICanPerform The actor from whom to get the ability ability object The ability to add to the actor Exceptions ArgumentNullException If any parameter is null ArgumentException If the actor does not implement IHasAbilities InvalidOperationException If the actor already has an ability of the same type as the ability to add, or which derives from the same type"
  },
  "api/CSF.Screenplay.Actors.ActorEventArgs.html": {
    "href": "api/CSF.Screenplay.Actors.ActorEventArgs.html",
    "title": "Class ActorEventArgs | Screenplay docs",
    "keywords": "Class ActorEventArgs Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll A model for event arguments which relate to an Actor. public class ActorEventArgs : EventArgs Inheritance object EventArgs ActorEventArgs Derived GainAbilityEventArgs PerformableEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActorEventArgs(Actor) Initializes a new instance of ActorEventArgs public ActorEventArgs(Actor actor) Parameters actor Actor The actor ActorEventArgs(string, Guid) Initializes a new instance of ActorEventArgs public ActorEventArgs(string actorName, Guid performanceIdentity) Parameters actorName string The actor's name performanceIdentity Guid The actor's performance identity Properties ActorName Gets the name of the actor to which these event arguments relate public string ActorName { get; } Property Value string PerformanceIdentity Gets the identity of the IPerformance to which the actor belongs. public Guid PerformanceIdentity { get; } Property Value Guid See Also Actor"
  },
  "api/CSF.Screenplay.Actors.Cast.html": {
    "href": "api/CSF.Screenplay.Actors.Cast.html",
    "title": "Class Cast | Screenplay docs",
    "keywords": "Class Cast Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.dll The default implementation of ICast which serves as a registry/factory for Actor instances. public sealed class Cast : ICast, IHasServiceProvider, IHasPerformanceIdentity Inheritance object Cast Implements ICast IHasServiceProvider IHasPerformanceIdentity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods CastExtensions.GetActor<TPersona>(ICast) Constructors Cast(IServiceProvider, Guid) Initialises a new instance of Cast. public Cast(IServiceProvider serviceProvider, Guid performanceIdentity) Parameters serviceProvider IServiceProvider A service provider performanceIdentity Guid The identity of the current performance Exceptions ArgumentNullException If serviceProvider is null. Properties PerformanceIdentity Gets the unique IPerformance identifier public Guid PerformanceIdentity { get; } Property Value Guid Remarks This value is used to uniquely identify a performance within a CSF.Screenplay. ServiceProvider Gets a service provider/resolver instance associated with this object. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods GetActor(IPersona) Gets a single Actor based upon a persona, creating them if they do not already exist in the cast. public Actor GetActor(IPersona persona) Parameters persona IPersona The persona from which to get an actor Returns Actor An actor of the specified name, either an existing instance or a newly-created actor. Remarks This method will create the actor within the current cast, using the persona as a factory, if they do not already exist. Alternatively, this method will return the existing actor, if they already exist in the cast, matched using the IPersona's Name. If executing this method results in the creation of a new actor then the ActorCreated event will be triggered. Actor names are matched using a case-insensitive invariant culture string comparison. Cast implementations should match an existing actor if the specified persona name differs only in case. Consider using GetActor<TPersona>(ICast) instead of this method; the generic version takes care of resolving the persona instance from dependency injection for you. See Also IPersona GetActor(string) Gets a single Actor by their name, creating them if they do not already exist in the cast. public Actor GetActor(string name) Parameters name string The name of the actor to get Returns Actor An actor of the specified name, either an existing instance or a newly-created actor. Remarks This method will create the actor within the current cast, if they do not already exist. Alternatively, this method will return the existing actor, if they already exist in the cast. If executing this method results in the creation of a new actor then the ActorCreated event will be triggered. Actor names are matched using a case-insensitive invariant culture string comparison. Cast implementations should match an existing actor if the specified name differs only in case. If you make use of a same-named actor across multiple performances then it is highly recommended to use personas in order to consistently define the actor's attributes and abilities. You would then use the overload of this method which uses that persona to define the actor. See Also IPersona Events ActorCreated Occurs when a new actor is created in the cast. public event EventHandler<ActorEventArgs> ActorCreated Event Type EventHandler<ActorEventArgs>"
  },
  "api/CSF.Screenplay.Actors.GainAbilityEventArgs.html": {
    "href": "api/CSF.Screenplay.Actors.GainAbilityEventArgs.html",
    "title": "Class GainAbilityEventArgs | Screenplay docs",
    "keywords": "Class GainAbilityEventArgs Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll A model for event arguments which relate to an actor gaining a new ability. public class GainAbilityEventArgs : ActorEventArgs Inheritance object EventArgs ActorEventArgs GainAbilityEventArgs Inherited Members ActorEventArgs.ActorName ActorEventArgs.PerformanceIdentity EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GainAbilityEventArgs(string, Guid, object) Initializes a new instance of GainAbilityEventArgs. public GainAbilityEventArgs(string actorName, Guid performanceIdentity, object ability) Parameters actorName string The actor's name performanceIdentity Guid The actor's performance identity ability object The ability Properties Ability Gets the ability which the actor has gained public object Ability { get; } Property Value object"
  },
  "api/CSF.Screenplay.Actors.ICanPerformGiven.html": {
    "href": "api/CSF.Screenplay.Actors.ICanPerformGiven.html",
    "title": "Interface ICanPerformGiven | Screenplay docs",
    "keywords": "Interface ICanPerformGiven Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll An actor which is able to perform in the Given phase of a IPerformance. public interface ICanPerformGiven Remarks This interface is conceptually identical to ICanPerform, except that the nomenclature of its methods is written in the past tense, as is best pratice for the Given phase of a performance. Methods WasAbleTo(IPerformable, CancellationToken) Performs an action or task which returns no result. ValueTask WasAbleTo(IPerformable performable, CancellationToken cancellationToken = default) Parameters performable IPerformable The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask A task which completes when the performable is complete WasAbleTo(IPerformableWithResult, CancellationToken) Performs an action or task which returns an untyped result. ValueTask<object> WasAbleTo(IPerformableWithResult performable, CancellationToken cancellationToken = default) Parameters performable IPerformableWithResult The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask<object> A task which exposes a result when the performable is complete WasAbleTo<T>(IPerformableWithResult<T>, CancellationToken) Performs an action or task which returns a strongly typed result. ValueTask<T> WasAbleTo<T>(IPerformableWithResult<T> performable, CancellationToken cancellationToken = default) Parameters performable IPerformableWithResult<T> The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask<T> A task which exposes a result when the performable is complete Type Parameters T The result type See Also ICanPerform"
  },
  "api/CSF.Screenplay.Actors.ICanPerformThen.html": {
    "href": "api/CSF.Screenplay.Actors.ICanPerformThen.html",
    "title": "Interface ICanPerformThen | Screenplay docs",
    "keywords": "Interface ICanPerformThen Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll An actor which is able to perform in the Then phase of a IPerformance. public interface ICanPerformThen Remarks This interface is conceptually identical to ICanPerform, except that the nomenclature of its methods is written in the future tense, as is best pratice for the Then phase of a performance. Methods Should(IPerformable, CancellationToken) Performs an action or task which returns no result. ValueTask Should(IPerformable performable, CancellationToken cancellationToken = default) Parameters performable IPerformable The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask A task which completes when the performable is complete Should(IPerformableWithResult, CancellationToken) Performs an action or task which returns an untyped result. ValueTask<object> Should(IPerformableWithResult performable, CancellationToken cancellationToken = default) Parameters performable IPerformableWithResult The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask<object> A task which exposes a result when the performable is complete Should<T>(IPerformableWithResult<T>, CancellationToken) Performs an action or task which returns a strongly typed result. ValueTask<T> Should<T>(IPerformableWithResult<T> performable, CancellationToken cancellationToken = default) Parameters performable IPerformableWithResult<T> The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask<T> A task which exposes a result when the performable is complete Type Parameters T The result type See Also ICanPerform"
  },
  "api/CSF.Screenplay.Actors.ICanPerformWhen.html": {
    "href": "api/CSF.Screenplay.Actors.ICanPerformWhen.html",
    "title": "Interface ICanPerformWhen | Screenplay docs",
    "keywords": "Interface ICanPerformWhen Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll An actor which is able to perform in the When phase of a IPerformance. public interface ICanPerformWhen Remarks This interface is conceptually identical to ICanPerform, except that the nomenclature of its methods is written in the present tense, as is best pratice for the When phase of a performance. In addition, the wording of these methods indicates that the actor is attempting something, which might fail. Methods AttemptsTo(IPerformable, CancellationToken) Performs an action or task which returns no result. ValueTask AttemptsTo(IPerformable performable, CancellationToken cancellationToken = default) Parameters performable IPerformable The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask A task which completes when the performable is complete AttemptsTo(IPerformableWithResult, CancellationToken) Performs an action or task which returns an untyped result. ValueTask<object> AttemptsTo(IPerformableWithResult performable, CancellationToken cancellationToken = default) Parameters performable IPerformableWithResult The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask<object> A task which exposes a result when the performable is complete AttemptsTo<T>(IPerformableWithResult<T>, CancellationToken) Performs an action or task which returns a strongly typed result. ValueTask<T> AttemptsTo<T>(IPerformableWithResult<T> performable, CancellationToken cancellationToken = default) Parameters performable IPerformableWithResult<T> The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask<T> A task which exposes a result when the performable is complete Type Parameters T The result type See Also ICanPerform"
  },
  "api/CSF.Screenplay.Actors.IHasPerformableEvents.html": {
    "href": "api/CSF.Screenplay.Actors.IHasPerformableEvents.html",
    "title": "Interface IHasPerformableEvents | Screenplay docs",
    "keywords": "Interface IHasPerformableEvents Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll An actor which may emit events as they participate in a IPerformance public interface IHasPerformableEvents Events BeginPerformable Occurs when the actor begins the execution of a performable object. event EventHandler<PerformableEventArgs> BeginPerformable Event Type EventHandler<PerformableEventArgs> EndPerformable Occurs when an actor ends the execution of a performable object. event EventHandler<PerformableEventArgs> EndPerformable Event Type EventHandler<PerformableEventArgs> GainedAbility Occurs when an actor gains a new ability. event EventHandler<GainAbilityEventArgs> GainedAbility Event Type EventHandler<GainAbilityEventArgs> PerformableFailed Occurs when a performable object fails with an exception. event EventHandler<PerformableFailureEventArgs> PerformableFailed Event Type EventHandler<PerformableFailureEventArgs> PerformableResult Occurs when an actor receives a result from a perfperformable objectrmance. event EventHandler<PerformableResultEventArgs> PerformableResult Event Type EventHandler<PerformableResultEventArgs>"
  },
  "api/CSF.Screenplay.Actors.PerformableEventArgs.html": {
    "href": "api/CSF.Screenplay.Actors.PerformableEventArgs.html",
    "title": "Class PerformableEventArgs | Screenplay docs",
    "keywords": "Class PerformableEventArgs Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll A model for event arguments which relate to an actor's use of a performable. public class PerformableEventArgs : ActorEventArgs Inheritance object EventArgs ActorEventArgs PerformableEventArgs Derived PerformableFailureEventArgs PerformableResultEventArgs Inherited Members ActorEventArgs.ActorName ActorEventArgs.PerformanceIdentity EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PerformableEventArgs(string, Guid, object, PerformancePhase) Initializes a new instance of PerformableEventArgs. public PerformableEventArgs(string actorName, Guid performanceIdentity, object performable, PerformancePhase phase = PerformancePhase.Unspecified) Parameters actorName string The actor's name performanceIdentity Guid The actor's performance identity performable object The performable item phase PerformancePhase The phase of performance Properties Performable Gets the performable item to which these event arguments relate. public object Performable { get; } Property Value object Phase Gets the performance phase to which these event arguments relate. public PerformancePhase Phase { get; } Property Value PerformancePhase"
  },
  "api/CSF.Screenplay.Actors.PerformableFailureEventArgs.html": {
    "href": "api/CSF.Screenplay.Actors.PerformableFailureEventArgs.html",
    "title": "Class PerformableFailureEventArgs | Screenplay docs",
    "keywords": "Class PerformableFailureEventArgs Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll A specialisation of PerformableEventArgs which describe the situation where an exception halted the execution of the performable item. public class PerformableFailureEventArgs : PerformableEventArgs Inheritance object EventArgs ActorEventArgs PerformableEventArgs PerformableFailureEventArgs Inherited Members PerformableEventArgs.Performable PerformableEventArgs.Phase ActorEventArgs.ActorName ActorEventArgs.PerformanceIdentity EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PerformableFailureEventArgs(string, Guid, object, Exception, PerformancePhase) Initializes a new instance of PerformableFailureEventArgs. public PerformableFailureEventArgs(string actorName, Guid performanceIdentity, object performable, Exception exception, PerformancePhase phase = PerformancePhase.Unspecified) Parameters actorName string The actor's name performanceIdentity Guid The actor's performance identity performable object The performable item which raised the exception exception Exception The exception which occurred phase PerformancePhase The phase of performance which was underway when the exception occurred Properties Exception Gets the exception which halted the performable item. public Exception Exception { get; } Property Value Exception"
  },
  "api/CSF.Screenplay.Actors.PerformableResultEventArgs.html": {
    "href": "api/CSF.Screenplay.Actors.PerformableResultEventArgs.html",
    "title": "Class PerformableResultEventArgs | Screenplay docs",
    "keywords": "Class PerformableResultEventArgs Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll A specialisation of PerformableEventArgs which describe a scenario in which the performable completed and has returned a result value. public class PerformableResultEventArgs : PerformableEventArgs Inheritance object EventArgs ActorEventArgs PerformableEventArgs PerformableResultEventArgs Inherited Members PerformableEventArgs.Performable PerformableEventArgs.Phase ActorEventArgs.ActorName ActorEventArgs.PerformanceIdentity EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PerformableResultEventArgs(string, Guid, object, object, PerformancePhase) Initializes a new instance of PerformableResultEventArgs. public PerformableResultEventArgs(string actorName, Guid performanceIdentity, object performable, object result, PerformancePhase phase = PerformancePhase.Unspecified) Parameters actorName string The actor's name performanceIdentity Guid The actor's performance identity performable object The performable item result object The result from the performable phase PerformancePhase The phase of performance Properties Result Gets the result value which was returned by the performable public object Result { get; } Property Value object"
  },
  "api/CSF.Screenplay.Actors.PerformancePhase.html": {
    "href": "api/CSF.Screenplay.Actors.PerformancePhase.html",
    "title": "Enum PerformancePhase | Screenplay docs",
    "keywords": "Enum PerformancePhase Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.Abstractions.dll Enumerates the phases of a performance public enum PerformancePhase Fields Given = 1 The 'Given' phase of a performance is for set-up and fulfilling preconditions Then = 3 The 'Then' phase of a performance is where the results of the When phase are as expected; is it a pass or a fail? Unspecified = 0 Indicates that no phase has been specified When = 2 The 'When' phase of a performance describes the activity which is under test Remarks It is common for a IPerformance to occur in phases. This is especially true when Screenplay is being used as a testing tool. This type enumerates the possible phases. If phases are irrelevant to your usage of Screenplay then feel free to use Unspecified, which is the default phase when no phase has been specified."
  },
  "api/CSF.Screenplay.Actors.Stage.html": {
    "href": "api/CSF.Screenplay.Actors.Stage.html",
    "title": "Class Stage | Screenplay docs",
    "keywords": "Class Stage Namespace CSF.Screenplay.Actors Assembly CSF.Screenplay.dll The default implementation of IStage which provides a context for which actor is currently active. public sealed class Stage : IStage, IHasPerformanceIdentity Inheritance object Stage Implements IStage IHasPerformanceIdentity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods StageExtensions.Spotlight<TPersona>(IStage) Constructors Stage(ICast) Initialises a new instance of Stage public Stage(ICast cast) Parameters cast ICast The cast Exceptions ArgumentNullException If the cast is null Properties Cast Gets the cast to which the current stage is linked. public ICast Cast { get; } Property Value ICast PerformanceIdentity Gets the unique IPerformance identifier public Guid PerformanceIdentity { get; } Property Value Guid Remarks This value is used to uniquely identify a performance within a CSF.Screenplay. Methods GetSpotlitActor() Gets the actor which is currently in the spotlight. public Actor GetSpotlitActor() Returns Actor The actor who has previously been placed in the spotlight, or a null reference if there is presently no actor in the spotlight. Spotlight(Actor) Places the specified actor into the spotlight, making them 'the current actor' on this stage. public void Spotlight(Actor actor) Parameters actor Actor Remarks A maximum of one actor may be in the spotlight at any time, so if a different actor is already in the spotlight as this method is used, then they will be implicitly removed and replaced by the specified actor. The actor who is in the spotlight may be retrieved by calling GetSpotlitActor(). If the specified actor is already in the spotlight then this method will have no effect, the actor will remain in the spotlight. If this method results in a new actor entering the spotlight (that is, they were not already in the spotlight) then the ActorSpotlit event will be triggered. To remove an actor from the spotlight without replacing them, use TurnSpotlightOff(). Exceptions ArgumentNullException If the actor is null. Spotlight(IPersona) Places an actor matching the specified persona into the spotlight, making them 'the current actor' on this stage. public Actor Spotlight(IPersona persona) Parameters persona IPersona Returns Actor The actor instance which was placed into the spotlight. Remarks A maximum of one actor may be in the spotlight at any time, so if a different actor is already in the spotlight as this method is used, then they will be implicitly removed and replaced by the actor derived from the persona. The actor who is in the spotlight may be retrieved by calling GetSpotlitActor(). If actor indicated by the persona is already in the spotlight then this method will have no effect, the actor will remain in the spotlight. If this method results in a new actor entering the spotlight (that is, they were not already in the spotlight) then the ActorSpotlit event will be triggered. When spotlighting a persona, the actor instance is retrieved from an ICast based upon that same persona. See GetActor(IPersona) for more information. To remove an actor from the spotlight without replacing them, use TurnSpotlightOff(). Consider using Spotlight<TPersona>(IStage) instead of this method; the generic version takes care of resolving the persona instance from dependency injection for you. Exceptions ArgumentNullException If the actor is null. TurnSpotlightOff() Removes any existing actor from the spotlight, ensuring that no actor is in the spotlight. public Actor TurnSpotlightOff() Returns Actor If an actor was previously in the spotlight, and has now been removed, then this method returns that actor; otherwise it will return a null reference. Remarks If this method results in the removal of an actor from the spotlight then the SpotlightTurnedOff event will be triggered. If there was already no actor in the spotlight when this method is executed then it will have no effect, the spotlight will remain empty, the event noted will not be triggered and this method will return null. Events ActorSpotlit Occurs when an actor enters the spotlight. public event EventHandler<ActorEventArgs> ActorSpotlit Event Type EventHandler<ActorEventArgs> Remarks This might mean that an actor who was previously in the spotlight has been removed and replaced. SpotlightTurnedOff Occurs when an actor is removed from the spotlight because the spotlight has been turned off. public event EventHandler<PerformanceScopeEventArgs> SpotlightTurnedOff Event Type EventHandler<PerformanceScopeEventArgs> Remarks This means that there is now no spotlit actor."
  },
  "api/CSF.Screenplay.Actors.html": {
    "href": "api/CSF.Screenplay.Actors.html",
    "title": "Namespace CSF.Screenplay.Actors | Screenplay docs",
    "keywords": "Namespace CSF.Screenplay.Actors Classes ActorEventArgs A model for event arguments which relate to an Actor. Cast The default implementation of ICast which serves as a registry/factory for Actor instances. GainAbilityEventArgs A model for event arguments which relate to an actor gaining a new ability. PerformableEventArgs A model for event arguments which relate to an actor's use of a performable. PerformableFailureEventArgs A specialisation of PerformableEventArgs which describe the situation where an exception halted the execution of the performable item. PerformableResultEventArgs A specialisation of PerformableEventArgs which describe a scenario in which the performable completed and has returned a result value. Stage The default implementation of IStage which provides a context for which actor is currently active. Interfaces ICanPerformGiven An actor which is able to perform in the Given phase of a IPerformance. ICanPerformThen An actor which is able to perform in the Then phase of a IPerformance. ICanPerformWhen An actor which is able to perform in the When phase of a IPerformance. IHasPerformableEvents An actor which may emit events as they participate in a IPerformance Enums PerformancePhase Enumerates the phases of a performance"
  },
  "api/CSF.Screenplay.CastExtensions.html": {
    "href": "api/CSF.Screenplay.CastExtensions.html",
    "title": "Class CastExtensions | Screenplay docs",
    "keywords": "Class CastExtensions Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll Extension methods for ICast. public static class CastExtensions Inheritance object CastExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetActor<TPersona>(ICast) Gets a single Actor based upon a persona, creating them if they do not already exist in the cast. public static Actor GetActor<TPersona>(this ICast cast) where TPersona : class, IPersona Parameters cast ICast The cast from which to get an actor Returns Actor An actor based on the specified persona, either an existing instance or a newly-created actor. Type Parameters TPersona A concrete type of IPersona from which to get an actor. Remarks This method will create the actor within the current cast, using a resolved instance of the persona as a factory, if they do not already exist. Alternatively, this method will return the existing actor, if they already exist in the cast, matched using the IPersona's Name. If executing this method results in the creation of a new actor then the ActorCreated event will be triggered. Actor names are matched using a case-insensitive invariant culture string comparison. Cast implementations should match an existing actor if the specified persona name differs only in case. This method is the recommended way of getting an actor from a persona, as it takes care of resolving the persona from dependency injection automatically. See Also IPersona"
  },
  "api/CSF.Screenplay.DefaultStrings.html": {
    "href": "api/CSF.Screenplay.DefaultStrings.html",
    "title": "Class DefaultStrings | Screenplay docs",
    "keywords": "Class DefaultStrings Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll An object which provides default human readable strings public static class DefaultStrings Inheritance object DefaultStrings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This is most commonly used when dealing with performables which do not implement ICanReport. Methods FormatValue(object) Formats a value public static string FormatValue(object value) Parameters value object The value to format Returns string The formatted value Remarks If the value implements IHasName then its Name will be returned, otherwise the result of ToString() will be returned, or an empty string if the value is null. If, by any chance, there is an exception raised whilst formatting the value then a string will be returned which indicates this and contains the exception details. GetAbilityReport(object, object) Gets a fallback report fragment for an ability which does not implement ICanReport. public static string GetAbilityReport(object actor, object ability) Parameters actor object The actor on whom to report ability object The ability object Returns string The report fragment Remarks This mechanism of getting a report fragment uses a simple fallback string which is similar to: {Actor} is able to {Ability}. The actor and ability objects will be formatted by FormatValue(object). GetReport(object, object) Gets a fallback report fragment for a performable which does not implement ICanReport. public static string GetReport(object actor, object performable) Parameters actor object The actor on whom to report performable object The performable object Returns string The report fragment Remarks This mechanism of getting a report fragment uses a simple fallback string which is similar to: {Actor} performs {Performable}. The actor and performable objects will be formatted by FormatValue(object)."
  },
  "api/CSF.Screenplay.ICanPerform.html": {
    "href": "api/CSF.Screenplay.ICanPerform.html",
    "title": "Interface ICanPerform | Screenplay docs",
    "keywords": "Interface ICanPerform Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll An actor which may perform in the Screenplay. public interface ICanPerform Extension Methods ActorExtensions.GetAbility(ICanPerform, Type) ActorExtensions.GetAbility<T>(ICanPerform) ActorExtensions.HasAbility(ICanPerform, Type) ActorExtensions.HasAbility<T>(ICanPerform) ActorExtensions.IsAbleTo(ICanPerform, object) Methods PerformAsync(IPerformable, CancellationToken) Performs an action or task which returns no result. ValueTask PerformAsync(IPerformable performable, CancellationToken cancellationToken = default) Parameters performable IPerformable The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask A task which completes when the performable is complete PerformAsync(IPerformableWithResult, CancellationToken) Performs an action or task which returns an untyped result. ValueTask<object> PerformAsync(IPerformableWithResult performable, CancellationToken cancellationToken = default) Parameters performable IPerformableWithResult The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask<object> A task which exposes a result when the performable is complete PerformAsync<T>(IPerformableWithResult<T>, CancellationToken) Performs an action or task which returns a strongly typed result. ValueTask<T> PerformAsync<T>(IPerformableWithResult<T> performable, CancellationToken cancellationToken = default) Parameters performable IPerformableWithResult<T> The performable item cancellationToken CancellationToken An optional token to cancel the performable Returns ValueTask<T> A task which exposes a result when the performable is complete Type Parameters T The result type See Also IPerformable IPerformableWithResult IPerformableWithResult<TResult> IHasAbilities"
  },
  "api/CSF.Screenplay.ICanReport.html": {
    "href": "api/CSF.Screenplay.ICanReport.html",
    "title": "Interface ICanReport | Screenplay docs",
    "keywords": "Interface ICanReport Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll A type which can provide a human-readable report fragment when it is used in a IPerformance. public interface ICanReport Remarks It is recommended for all types for Actions, Questions, Tasks (broadly \"Performables\") as well as Abilities to implement this interface. Implementing this interface permits the type to emit a human-readable value for when the type is used in a Performance. For Performables implementing this interface, the report fragment indicates that the performable has been executed in the Performance. For abilities which implement this interface, the report fragment is used when an Actor gains/is granted the ability. Methods GetReportFragment(IHasName) Gets a fragment of a Screenplay report, specific to the execution (performables) or gaining (abilities) of the current instance, for the specified actor. string GetReportFragment(IHasName actor) Parameters actor IHasName An actor for whom to write the report fragment Returns string A human-readable report fragment. Examples For a performable which clicks a button (where the button itself has been constructor-injected into the performable instance), then a suitable return value might be a formatted string such as {Actor name} clicks {Button}, where the two placeholders indicated by braces: {} are substituted with the actor's Name and a string representation of the button. For a performable which reads the temperature from a thermometer, a suitable return value might be a string in the format {Actor name} reads the temperature. For an ability which allows the actor to wash dishes then a suitable return value might be a string in the format {Actor name} is able to wash the dishes. Remarks Implementers should return a string which indicates that the named actor is performing (present tense) the performable, for types which also implement a performable interface. For types which represent abilities, the implementer should return a string which indicates that the named actor is able to do something. In particular for abilities, to make them easily recognisable in reports, it helps to stick to the convention {Actor name} is able to {Ability summary}. For performables which return a value (Questions, or Tasks which behave like Questions), there is no need to include the returned value within the report fragment. The framework will include the return value in the report and will format it via a different mechanism. Good report fragments are concise. Be aware that report fragments for Tasks (which are composed from other performables) do not need to go into detail about what they do. Users reading Screenplay reports are able to drill-down into Tasks to see what they are composed from, so if the user is curious as to what the task does, it is easy to discover. It is also strongly recommended to avoid periods (full stops) at the end of a report fragment. Whilst report fragments tend to be complete sentences, punctuation like this is distracting and reports are seldom presented as paragraphs of prose. See Also IPerformable IPerformableWithResult IPerformableWithResult<TResult>"
  },
  "api/CSF.Screenplay.ICast.html": {
    "href": "api/CSF.Screenplay.ICast.html",
    "title": "Interface ICast | Screenplay docs",
    "keywords": "Interface ICast Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll A combined registry and factory for Actor instances, useful when coordinating multiple actors across a IPerformance public interface ICast : IHasServiceProvider, IHasPerformanceIdentity Inherited Members IHasServiceProvider.ServiceProvider IHasPerformanceIdentity.PerformanceIdentity Extension Methods CastExtensions.GetActor<TPersona>(ICast) Remarks The cast is a strongly recommended component of Screenplay logic. It is used to manage Actor objects for the duration of a IPerformance. Cast objects are always scoped to a IPerformance and have the same lifetime. Any actors created or tracked by a cast will also automatically share this lifetime. In terms of design patterns, the cast operates as both a registry: https://martinfowler.com/eaaCatalog/registry.html and as a factory: https://en.wikipedia.org/wiki/Factory_method_pattern for actors. During the cast's lifetime, subsequent calls to an overload of GetActor using the same actor/persona name will return the instance of Actor as was created the first time the method was called with that name. A cast, and the actors managed by a cast, are independent per IPerformance, though. Developers are strongly advised to configure their actors via classes which derive from IPersona. This allows for sharing of common actor-setup logic such as abilities. In a Screenplay the cast is a dependency-injectable service which may be used within your performances. Methods GetActor(IPersona) Gets a single Actor based upon a persona, creating them if they do not already exist in the cast. Actor GetActor(IPersona persona) Parameters persona IPersona The persona from which to get an actor Returns Actor An actor of the specified name, either an existing instance or a newly-created actor. Remarks This method will create the actor within the current cast, using the persona as a factory, if they do not already exist. Alternatively, this method will return the existing actor, if they already exist in the cast, matched using the IPersona's Name. If executing this method results in the creation of a new actor then the ActorCreated event will be triggered. Actor names are matched using a case-insensitive invariant culture string comparison. Cast implementations should match an existing actor if the specified persona name differs only in case. Consider using GetActor<TPersona>(ICast) instead of this method; the generic version takes care of resolving the persona instance from dependency injection for you. See Also IPersona GetActor(string) Gets a single Actor by their name, creating them if they do not already exist in the cast. Actor GetActor(string name) Parameters name string The name of the actor to get Returns Actor An actor of the specified name, either an existing instance or a newly-created actor. Remarks This method will create the actor within the current cast, if they do not already exist. Alternatively, this method will return the existing actor, if they already exist in the cast. If executing this method results in the creation of a new actor then the ActorCreated event will be triggered. Actor names are matched using a case-insensitive invariant culture string comparison. Cast implementations should match an existing actor if the specified name differs only in case. If you make use of a same-named actor across multiple performances then it is highly recommended to use personas in order to consistently define the actor's attributes and abilities. You would then use the overload of this method which uses that persona to define the actor. See Also IPersona Events ActorCreated Occurs when a new actor is created in the cast. event EventHandler<ActorEventArgs> ActorCreated Event Type EventHandler<ActorEventArgs> See Also IStage Actor IPerformance IPersona"
  },
  "api/CSF.Screenplay.IHasAbilities.html": {
    "href": "api/CSF.Screenplay.IHasAbilities.html",
    "title": "Interface IHasAbilities | Screenplay docs",
    "keywords": "Interface IHasAbilities Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll An object which has & is able to gain abilities. public interface IHasAbilities Extension Methods ActorExtensions.HasAbility(IHasAbilities, Type) ActorExtensions.HasAbility<T>(IHasAbilities) Remarks Abilities are the mechanism by which actors: ICanPerform interact with the application and system. They are arbitrary objects which provide functionality. Properties Abilities Gets the collection of the actor's abilities. IReadOnlyCollection<object> Abilities { get; } Property Value IReadOnlyCollection<object> Methods IsAbleTo(object) Adds an ability to the specified actor void IsAbleTo(object ability) Parameters ability object The ability to add to the actor Exceptions ArgumentNullException If ability is null InvalidOperationException If the actor already has an ability of the same type as ability, or which derives from the same type"
  },
  "api/CSF.Screenplay.IHasName.html": {
    "href": "api/CSF.Screenplay.IHasName.html",
    "title": "Interface IHasName | Screenplay docs",
    "keywords": "Interface IHasName Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll A part of a Screenplay performance which has a human-readable name. public interface IHasName Properties Name Gets the human-readable name of the current object. string Name { get; } Property Value string Remarks null is not an acceptable or permitted return type here. All types which implement this interface must return a non-null response from this property."
  },
  "api/CSF.Screenplay.IHasPerformanceIdentity.html": {
    "href": "api/CSF.Screenplay.IHasPerformanceIdentity.html",
    "title": "Interface IHasPerformanceIdentity | Screenplay docs",
    "keywords": "Interface IHasPerformanceIdentity Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll An object which provides a value which uniquely identifies the currently-executing IPerformance. public interface IHasPerformanceIdentity Properties PerformanceIdentity Gets the unique IPerformance identifier Guid PerformanceIdentity { get; } Property Value Guid Remarks This value is used to uniquely identify a performance within a CSF.Screenplay."
  },
  "api/CSF.Screenplay.IHasServiceProvider.html": {
    "href": "api/CSF.Screenplay.IHasServiceProvider.html",
    "title": "Interface IHasServiceProvider | Screenplay docs",
    "keywords": "Interface IHasServiceProvider Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll An object which has an associated IServiceProvider, which resolves services from dependency injection. public interface IHasServiceProvider Properties ServiceProvider Gets a service provider/resolver instance associated with this object. IServiceProvider ServiceProvider { get; } Property Value IServiceProvider"
  },
  "api/CSF.Screenplay.IHasSubscribedActors.html": {
    "href": "api/CSF.Screenplay.IHasSubscribedActors.html",
    "title": "Interface IHasSubscribedActors | Screenplay docs",
    "keywords": "Interface IHasSubscribedActors Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll An object which may subscribe to actor's events. public interface IHasSubscribedActors Methods GetSubscribedActors() Gets a collection of the Actors to whom the current object subscribes. IReadOnlyCollection<IHasPerformableEvents> GetSubscribedActors() Returns IReadOnlyCollection<IHasPerformableEvents> A collection of actors Remarks Please note that the collection returned by this method is a copy of the currently-subscribed actors; a snapshot. It will not be automatically updated if an actor is newly subscribed-to. SubscribeTo(IHasPerformableEvents) Adds a subscription to the specified Actor's events. void SubscribeTo(IHasPerformableEvents actor) Parameters actor IHasPerformableEvents The actor to which the current object should subscribe. Exceptions ArgumentNullException If the actor is null."
  },
  "api/CSF.Screenplay.IPerformable.html": {
    "href": "api/CSF.Screenplay.IPerformable.html",
    "title": "Interface IPerformable | Screenplay docs",
    "keywords": "Interface IPerformable Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll An object which represents something that a performer (typically an actor) may perform. public interface IPerformable Extension Methods PerformableExtensions.GetReportFragment(IPerformable, IHasName) Remarks Performable objects generally fall into one of three categories in Screenplay: An action, which is the most fine-grained type of performable, typically \"doing something which alters the state of the application\" A question, which is fine-grained like an action but instead reads state without changing it A task, which may be composed of actions, questions or even other tasks Objects which implement only this interface are the simplest types of performables; they simply 'do something' and then finish. In the list given above these are typically actions. They do not return any form of result except completion. If you wish to get a result from the performable then consider implementing an interface derived from this one, such as IPerformableWithResult or its strongly-typed counterpart IPerformableWithResult<TResult>. When implementing this interface, consider also implementing ICanReport. If a performable does not implement ICanReport then it will receive default text when the IPerformance report is generated. Implementing ICanReport allows a performable to provide a customised human-readable report fragment. Methods PerformAsAsync(ICanPerform, CancellationToken) Performs the action(s) are represented by the current instance. ValueTask PerformAsAsync(ICanPerform actor, CancellationToken cancellationToken = default) Parameters actor ICanPerform The actor that is performing. cancellationToken CancellationToken An optional cancellation token by which to abort the performable. Returns ValueTask A task which completes when the performable represented by the current instance is complete. See Also IPerformableWithResult IPerformableWithResult<TResult>"
  },
  "api/CSF.Screenplay.IPerformableWithResult-1.html": {
    "href": "api/CSF.Screenplay.IPerformableWithResult-1.html",
    "title": "Interface IPerformableWithResult<TResult> | Screenplay docs",
    "keywords": "Interface IPerformableWithResult<TResult> Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll An object which represents something that a performer (typically an actor) may perform and which returns a strongly-typed result when it completes. public interface IPerformableWithResult<TResult> Type Parameters TResult Extension Methods PerformableExtensions.GetReportFragment<T>(IPerformableWithResult<T>, IHasName) PerformableExtensions.ToNonGenericPerformableWithResult<TResult>(IPerformableWithResult<TResult>) PerformableExtensions.ToPerformable<TResult>(IPerformableWithResult<TResult>) Remarks Performable objects generally fall into one of three categories in Screenplay: An action, which is the most fine-grained type of performable, typically \"doing something which alters the state of the application\" A question, which is fine-grained like an action but instead reads state without changing it A task, which may be composed of actions, questions or even other tasks Objects which implement this interface are questions or tasks which are composed (at least in-part) from one or more questions. If you do not wish to get a result from the performable then implement only IPerformable instead. Objects which implement this interface may be adapted to IPerformable via the ToPerformable<TResult>(IPerformableWithResult<TResult>) extension method or to the non-generic IPerformableWithResult via ToNonGenericPerformableWithResult<TResult>(IPerformableWithResult<TResult>). When implementing this interface, consider also implementing ICanReport. If a performable does not implement ICanReport then it will receive default text when the IPerformance report is generated. Implementing ICanReport allows a performable to provide a customised human-readable report fragment. Methods PerformAsAsync(ICanPerform, CancellationToken) Performs the action(s) are represented by the current instance and returns a strongly-typed value. ValueTask<TResult> PerformAsAsync(ICanPerform actor, CancellationToken cancellationToken = default) Parameters actor ICanPerform The actor that is performing. cancellationToken CancellationToken An optional cancellation token by which to abort the performable. Returns ValueTask<TResult> A task which exposes a strongly-typed 'result' value when the performable represented by the current instance is complete. See Also IPerformable IPerformableWithResult ToPerformable<TResult>(IPerformableWithResult<TResult>) ToNonGenericPerformableWithResult<TResult>(IPerformableWithResult<TResult>)"
  },
  "api/CSF.Screenplay.IPerformableWithResult.html": {
    "href": "api/CSF.Screenplay.IPerformableWithResult.html",
    "title": "Interface IPerformableWithResult | Screenplay docs",
    "keywords": "Interface IPerformableWithResult Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll An object which represents something that a performer (typically an actor) may perform and which returns a result when it completes. public interface IPerformableWithResult Extension Methods PerformableExtensions.GetReportFragment(IPerformableWithResult, IHasName) PerformableExtensions.ToPerformable(IPerformableWithResult) Remarks Performable objects generally fall into one of three categories in Screenplay: An action, which is the most fine-grained type of performable, typically \"doing something which alters the state of the application\" A question, which is fine-grained like an action but instead reads state without changing it A task, which may be composed of actions, questions or even other tasks Objects which implement this interface are questions or tasks which are composed (at least in-part) from one or more questions. If you do not wish to get a result from the performable then implement only IPerformable instead. Alternatively, if you wish to return a strongly-typed result then instead consider implementing IPerformableWithResult<TResult>. Objects which implement this interface may be adapted to IPerformable via the ToPerformable(IPerformableWithResult) extension method. When implementing this interface, consider also implementing ICanReport. If a performable does not implement ICanReport then it will receive default text when the IPerformance report is generated. Implementing ICanReport allows a performable to provide a customised human-readable report fragment. Methods PerformAsAsync(ICanPerform, CancellationToken) Performs the action(s) are represented by the current instance and returns a value. ValueTask<object> PerformAsAsync(ICanPerform actor, CancellationToken cancellationToken = default) Parameters actor ICanPerform The actor that is performing. cancellationToken CancellationToken An optional cancellation token by which to abort the performable. Returns ValueTask<object> A task which exposes a 'result' value when the performable represented by the current instance is complete. See Also IPerformable IPerformableWithResult<TResult> ToPerformable(IPerformableWithResult)"
  },
  "api/CSF.Screenplay.IPerformance.html": {
    "href": "api/CSF.Screenplay.IPerformance.html",
    "title": "Interface IPerformance | Screenplay docs",
    "keywords": "Interface IPerformance Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll A performance represents a self-contained scope of performables which typically results in overall success or failure. public interface IPerformance : IHasPerformanceIdentity, IHasServiceProvider, IDisposable, IBeginsAndEndsPerformance Inherited Members IHasPerformanceIdentity.PerformanceIdentity IHasServiceProvider.ServiceProvider IDisposable.Dispose() IBeginsAndEndsPerformance.BeginPerformance() IBeginsAndEndsPerformance.FinishPerformance(bool?) Remarks The performance provides a scope for a script involving one or more Actor instances, executing one or more performable items. A Screenplay will contain one or more performances. A performance is a series of actions/performables with a beginning, middle and end. Actors participate in the performance and drive the performables forward. Typically a performance will complete in either success or failure. Where Screenplay is being used for automated testing, a performance corresponds to a single test. In the testing framework that might be called a \"scenario\", a \"test\", a \"test case\", or a \"theory\". When using Screenplay within a testing integration, the performance corresponds very closely to the current Scenario. The performance object also corresponds to the lifetime of the dependency injection scope. A new scope is created for each performance. You may wish to read a diagram showing how screenplays, performances, actors and performables relate to one another. Properties NamingHierarchy Gets an ordered list of identifiers which indicate the current performance's name within an organisational hierarchy. List<IdentifierAndName> NamingHierarchy { get; } Property Value List<IdentifierAndName> Examples If the current performance is to be named Joe can take out the Trash, and it is part of a parent name, named Joe can do his chores then the first identifier in the list will be named Joe can do his chores and the second will be named Joe can take out the Trash. Remarks A Screenplay typically contains more than one performance and may contain many. It is normal to organise performances into a hierarchical structure based upon their purpose, role or relationship. The position of the current performance in that naming structure is represented by the value of this property. The ordered list of IdentifierAndName instances indicate a path from the 'root' of the hierarchy (which has no inherent name) to the current performance. Identifier/name pairs which are earlier in the collection are considered to be closer to the root, whereas latter identifier/names are branch & leaf names. In this manner, they work very similarly to .NET namespaces. The earlier in the list that a name appears, the more general it should be, representing a wider category. When using Screenplay with Integration, this hierarchy of names would typically correspond to the naming convention used by the testing framework. That might be based upon .NET namespaces, classes and test methods for a more traditional unit testing framework. Alternatively, for a BDD-style testing framework, it could be named based upon human-readable feature & scenario names. PerformanceState Gets a value which indicates the state of the current performance. PerformanceState PerformanceState { get; } Property Value PerformanceState See Also PerformanceState"
  },
  "api/CSF.Screenplay.IPersona.html": {
    "href": "api/CSF.Screenplay.IPersona.html",
    "title": "Interface IPersona | Screenplay docs",
    "keywords": "Interface IPersona Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll A persona is a factory for a commonly-used actor public interface IPersona : IHasName Inherited Members IHasName.Name Remarks In Screenplay is is recommended to use memorable actors which are widely understood and recognisable by the team. This is easier if the composition of an actor is the same across every IPerformance in which they participate. By using a separate persona implementation for each named actor, the developer can ensure consistent creation for instances of those actors. Methods GetActor(Guid) Gets the actor which is associated with the current persona Actor GetActor(Guid performanceIdentity) Parameters performanceIdentity Guid A unique identity for the currently-executing performance Returns Actor Remarks Implementors should not only create and return the actor from this method, but also configure the actor with the standard abilities associated with this persona."
  },
  "api/CSF.Screenplay.IStage.html": {
    "href": "api/CSF.Screenplay.IStage.html",
    "title": "Interface IStage | Screenplay docs",
    "keywords": "Interface IStage Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll The stage facilitates a contextual Actor who is 'in the spotlight' - a currently-active actor public interface IStage Extension Methods StageExtensions.Spotlight<TPersona>(IStage) Examples Consider a IPerformance which is based upon the following, which is described in Gherkin BDD syntax: https://cucumber.io/docs/gherkin/. Given Jack can wash dishes And Jack has filled a basin with hot water When Jack washes a dinner plate Then Jack should have one clean dinner plate This format of test is perfectly functional, but each performable item needed to be qualified with the actor's name: \"Jack\". This could be more human-readable but also more reusable from a code perspective if we had a context of a 'current' actor, who we could refer to with a pronoun. With such a concept, our gherkin could read \"he has\" or \"he washes\" and could accept any one of a variety of pronouns. Remarks The Stage is an optional but recommended component of Screenplay, useful when a IPerformance involves repeated use of an Actor. It facilitates the use of passive voice and the use of pronouns within the logic of performances without needing to frequently repeat the Name of the actor. It is often more consise and easier to understand performances when some of the steps use the passive voice. In order to do this, there must be a concept which allows us to discern \"which actor is acting at the moment\". The stage provides this via the concept of a Spotlight. Either zero or one actor may be in the spotlight at any given time. If a new actor is placed in the spotlight then the previous actor is removed from it. Spotlighting an actor facilitates performance steps which use 'the current actor' instead of a specific named actor. The lifetime of a stage instance is equal to the lifetime of the current IPerformance. An actor in the spotlight will be consistent across the lifetime of the performance but will be independent of other performances. In a Screenplay the stage is a dependency-injectable service which may be used within your performances. The stage implicitly consumes some functionality from the ICast. If Spotlight(IPersona) is used, then the Actor to put in the spotlight will implicitly be retrieved using the cast, via GetActor(IPersona). Properties Cast Gets the cast to which the current stage is linked. ICast Cast { get; } Property Value ICast Methods GetSpotlitActor() Gets the actor which is currently in the spotlight. Actor GetSpotlitActor() Returns Actor The actor who has previously been placed in the spotlight, or a null reference if there is presently no actor in the spotlight. Spotlight(Actor) Places the specified actor into the spotlight, making them 'the current actor' on this stage. void Spotlight(Actor actor) Parameters actor Actor Remarks A maximum of one actor may be in the spotlight at any time, so if a different actor is already in the spotlight as this method is used, then they will be implicitly removed and replaced by the specified actor. The actor who is in the spotlight may be retrieved by calling GetSpotlitActor(). If the specified actor is already in the spotlight then this method will have no effect, the actor will remain in the spotlight. If this method results in a new actor entering the spotlight (that is, they were not already in the spotlight) then the ActorSpotlit event will be triggered. To remove an actor from the spotlight without replacing them, use TurnSpotlightOff(). Exceptions ArgumentNullException If the actor is null. Spotlight(IPersona) Places an actor matching the specified persona into the spotlight, making them 'the current actor' on this stage. Actor Spotlight(IPersona persona) Parameters persona IPersona Returns Actor The actor instance which was placed into the spotlight. Remarks A maximum of one actor may be in the spotlight at any time, so if a different actor is already in the spotlight as this method is used, then they will be implicitly removed and replaced by the actor derived from the persona. The actor who is in the spotlight may be retrieved by calling GetSpotlitActor(). If actor indicated by the persona is already in the spotlight then this method will have no effect, the actor will remain in the spotlight. If this method results in a new actor entering the spotlight (that is, they were not already in the spotlight) then the ActorSpotlit event will be triggered. When spotlighting a persona, the actor instance is retrieved from an ICast based upon that same persona. See GetActor(IPersona) for more information. To remove an actor from the spotlight without replacing them, use TurnSpotlightOff(). Consider using Spotlight<TPersona>(IStage) instead of this method; the generic version takes care of resolving the persona instance from dependency injection for you. Exceptions ArgumentNullException If the actor is null. TurnSpotlightOff() Removes any existing actor from the spotlight, ensuring that no actor is in the spotlight. Actor TurnSpotlightOff() Returns Actor If an actor was previously in the spotlight, and has now been removed, then this method returns that actor; otherwise it will return a null reference. Remarks If this method results in the removal of an actor from the spotlight then the SpotlightTurnedOff event will be triggered. If there was already no actor in the spotlight when this method is executed then it will have no effect, the spotlight will remain empty, the event noted will not be triggered and this method will return null. Events ActorSpotlit Occurs when an actor enters the spotlight. event EventHandler<ActorEventArgs> ActorSpotlit Event Type EventHandler<ActorEventArgs> Remarks This might mean that an actor who was previously in the spotlight has been removed and replaced. SpotlightTurnedOff Occurs when an actor is removed from the spotlight because the spotlight has been turned off. event EventHandler<PerformanceScopeEventArgs> SpotlightTurnedOff Event Type EventHandler<PerformanceScopeEventArgs> Remarks This means that there is now no spotlit actor. See Also ICast"
  },
  "api/CSF.Screenplay.NoResultPerformableAdapter.html": {
    "href": "api/CSF.Screenplay.NoResultPerformableAdapter.html",
    "title": "Class NoResultPerformableAdapter | Screenplay docs",
    "keywords": "Class NoResultPerformableAdapter Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll Adapter class which allows an IPerformableWithResult to be used as an IPerformable. public class NoResultPerformableAdapter : IPerformable, ICanReport Inheritance object NoResultPerformableAdapter Implements IPerformable ICanReport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PerformableExtensions.GetReportFragment(IPerformable, IHasName) Remarks This class intentionally has only an internal constructor, which means it may only be constructed by Screenplay framework logic. This is the extension method ToPerformable(IPerformableWithResult). Properties PerformableWithResult Gets the wrapped IPerformableWithResult instance. public IPerformableWithResult PerformableWithResult { get; } Property Value IPerformableWithResult Methods GetReportFragment(IHasName) Gets a fragment of a Screenplay report, specific to the execution (performables) or gaining (abilities) of the current instance, for the specified actor. public string GetReportFragment(IHasName actor) Parameters actor IHasName An actor for whom to write the report fragment Returns string A human-readable report fragment. Examples For a performable which clicks a button (where the button itself has been constructor-injected into the performable instance), then a suitable return value might be a formatted string such as {Actor name} clicks {Button}, where the two placeholders indicated by braces: {} are substituted with the actor's Name and a string representation of the button. For a performable which reads the temperature from a thermometer, a suitable return value might be a string in the format {Actor name} reads the temperature. For an ability which allows the actor to wash dishes then a suitable return value might be a string in the format {Actor name} is able to wash the dishes. Remarks Implementers should return a string which indicates that the named actor is performing (present tense) the performable, for types which also implement a performable interface. For types which represent abilities, the implementer should return a string which indicates that the named actor is able to do something. In particular for abilities, to make them easily recognisable in reports, it helps to stick to the convention {Actor name} is able to {Ability summary}. For performables which return a value (Questions, or Tasks which behave like Questions), there is no need to include the returned value within the report fragment. The framework will include the return value in the report and will format it via a different mechanism. Good report fragments are concise. Be aware that report fragments for Tasks (which are composed from other performables) do not need to go into detail about what they do. Users reading Screenplay reports are able to drill-down into Tasks to see what they are composed from, so if the user is curious as to what the task does, it is easy to discover. It is also strongly recommended to avoid periods (full stops) at the end of a report fragment. Whilst report fragments tend to be complete sentences, punctuation like this is distracting and reports are seldom presented as paragraphs of prose. PerformAsAsync(ICanPerform, CancellationToken) Performs the action(s) are represented by the current instance. public ValueTask PerformAsAsync(ICanPerform actor, CancellationToken cancellationToken = default) Parameters actor ICanPerform The actor that is performing. cancellationToken CancellationToken An optional cancellation token by which to abort the performable. Returns ValueTask A task which completes when the performable represented by the current instance is complete. See Also PerformableExtensions"
  },
  "api/CSF.Screenplay.NonGenericPerformableWithResultAdapter-1.html": {
    "href": "api/CSF.Screenplay.NonGenericPerformableWithResultAdapter-1.html",
    "title": "Class NonGenericPerformableWithResultAdapter<T> | Screenplay docs",
    "keywords": "Class NonGenericPerformableWithResultAdapter<T> Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll Adapter class which allows an IPerformableWithResult<TResult> to be used as an IPerformableWithResult. public class NonGenericPerformableWithResultAdapter<T> : IPerformableWithResult, ICanReport Type Parameters T Inheritance object NonGenericPerformableWithResultAdapter<T> Implements IPerformableWithResult ICanReport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PerformableExtensions.GetReportFragment(IPerformableWithResult, IHasName) PerformableExtensions.ToPerformable(IPerformableWithResult) Remarks This class intentionally has only an internal constructor, which means it may only be constructed by Screenplay framework logic. This is the extension method ToNonGenericPerformableWithResult<TResult>(IPerformableWithResult<TResult>). Properties PerformableWithResult Gets the wrapped IPerformableWithResult<TResult> instance. public IPerformableWithResult<T> PerformableWithResult { get; } Property Value IPerformableWithResult<T> Methods GetReportFragment(IHasName) Gets a fragment of a Screenplay report, specific to the execution (performables) or gaining (abilities) of the current instance, for the specified actor. public string GetReportFragment(IHasName actor) Parameters actor IHasName An actor for whom to write the report fragment Returns string A human-readable report fragment. Examples For a performable which clicks a button (where the button itself has been constructor-injected into the performable instance), then a suitable return value might be a formatted string such as {Actor name} clicks {Button}, where the two placeholders indicated by braces: {} are substituted with the actor's Name and a string representation of the button. For a performable which reads the temperature from a thermometer, a suitable return value might be a string in the format {Actor name} reads the temperature. For an ability which allows the actor to wash dishes then a suitable return value might be a string in the format {Actor name} is able to wash the dishes. Remarks Implementers should return a string which indicates that the named actor is performing (present tense) the performable, for types which also implement a performable interface. For types which represent abilities, the implementer should return a string which indicates that the named actor is able to do something. In particular for abilities, to make them easily recognisable in reports, it helps to stick to the convention {Actor name} is able to {Ability summary}. For performables which return a value (Questions, or Tasks which behave like Questions), there is no need to include the returned value within the report fragment. The framework will include the return value in the report and will format it via a different mechanism. Good report fragments are concise. Be aware that report fragments for Tasks (which are composed from other performables) do not need to go into detail about what they do. Users reading Screenplay reports are able to drill-down into Tasks to see what they are composed from, so if the user is curious as to what the task does, it is easy to discover. It is also strongly recommended to avoid periods (full stops) at the end of a report fragment. Whilst report fragments tend to be complete sentences, punctuation like this is distracting and reports are seldom presented as paragraphs of prose. PerformAsAsync(ICanPerform, CancellationToken) Performs the action(s) are represented by the current instance and returns a value. public ValueTask<object> PerformAsAsync(ICanPerform actor, CancellationToken cancellationToken = default) Parameters actor ICanPerform The actor that is performing. cancellationToken CancellationToken An optional cancellation token by which to abort the performable. Returns ValueTask<object> A task which exposes a 'result' value when the performable represented by the current instance is complete. See Also PerformableExtensions"
  },
  "api/CSF.Screenplay.PerformableExtensions.html": {
    "href": "api/CSF.Screenplay.PerformableExtensions.html",
    "title": "Class PerformableExtensions | Screenplay docs",
    "keywords": "Class PerformableExtensions Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll Extension methods for performable types public static class PerformableExtensions Inheritance object PerformableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetReportFragment(IPerformable, IHasName) Gets a report fragment for the specified performable and actor public static string GetReportFragment(this IPerformable performable, IHasName actor) Parameters performable IPerformable The performable item actor IHasName The actor Returns string Remarks If the performable item does not implement ICanReport then a default fallback report will be produced and returned. Exceptions ArgumentNullException If performable is null GetReportFragment(IPerformableWithResult, IHasName) Gets a report fragment for the specified performable and actor public static string GetReportFragment(this IPerformableWithResult performable, IHasName actor) Parameters performable IPerformableWithResult The performable item actor IHasName The actor Returns string Remarks If the performable item does not implement ICanReport then a default fallback report will be produced and returned. Exceptions ArgumentNullException If performable is null GetReportFragment<T>(IPerformableWithResult<T>, IHasName) Gets a report fragment for the specified performable and actor public static string GetReportFragment<T>(this IPerformableWithResult<T> performable, IHasName actor) Parameters performable IPerformableWithResult<T> The performable item actor IHasName The actor Returns string Type Parameters T The result type returned by the performable Remarks If the performable item does not implement ICanReport then a default fallback report will be produced and returned. Exceptions ArgumentNullException If performable is null ToNonGenericPerformableWithResult<TResult>(IPerformableWithResult<TResult>) Gets an IPerformableWithResult which allows the specified generic performable to be used non-generically. public static IPerformableWithResult ToNonGenericPerformableWithResult<TResult>(this IPerformableWithResult<TResult> performableWithResult) Parameters performableWithResult IPerformableWithResult<TResult> The performable instance to be wrapped in an adapter Returns IPerformableWithResult Type Parameters TResult Remarks This is implemented by wrapping the performable in an adapter instance, so the object returned will not be the original performable. It is not recommended to do so, but if the original performable is required then you may cast this object to NonGenericNoResultPerformableAdapter<T> and use the PerformableWithResult property to get the original wrapped performable instance. Of course, you will need to know & use the correct generic type to do so. ToPerformable(IPerformableWithResult) Gets an IPerformable which allows the specified performable (which returns a result) to be used in a manner which discards its result. public static IPerformable ToPerformable(this IPerformableWithResult performableWithResult) Parameters performableWithResult IPerformableWithResult The performable instance to be wrapped in an adapter Returns IPerformable Remarks This is implemented by wrapping the performable in an adapter instance, so the object returned will not be the original performable. It is not recommended to do so, but if the original performable is required then you may cast this object to NoResultPerformableAdapter and use the PerformableWithResult property to get the original wrapped performable instance. ToPerformable<TResult>(IPerformableWithResult<TResult>) Gets an IPerformable which allows the specified performable (which returns a generic result) to be used non-generically and in a manner which discards its result. public static IPerformable ToPerformable<TResult>(this IPerformableWithResult<TResult> performableWithResult) Parameters performableWithResult IPerformableWithResult<TResult> The performable instance to be wrapped in an adapter Returns IPerformable Type Parameters TResult Remarks This is implemented by wrapping the performable in an adapter instance, so the object returned will not be the original performable. It is not recommended to do so, but if the original performable is required then you may cast this object to NonGenericPerformableWithResultAdapter<T> and use the PerformableWithResult property to get the original wrapped performable instance. Of course, you will need to know & use the correct generic type to do so."
  },
  "api/CSF.Screenplay.Performables.NonGenericNoResultPerformableAdapter-1.html": {
    "href": "api/CSF.Screenplay.Performables.NonGenericNoResultPerformableAdapter-1.html",
    "title": "Class NonGenericNoResultPerformableAdapter<T> | Screenplay docs",
    "keywords": "Class NonGenericNoResultPerformableAdapter<T> Namespace CSF.Screenplay.Performables Assembly CSF.Screenplay.Abstractions.dll Adapter class which allows an IPerformableWithResult<TResult> to be used as an IPerformable. public class NonGenericNoResultPerformableAdapter<T> : IPerformable, ICanReport Type Parameters T Inheritance object NonGenericNoResultPerformableAdapter<T> Implements IPerformable ICanReport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PerformableExtensions.GetReportFragment(IPerformable, IHasName) Remarks This class intentionally has only an internal constructor, which means it may only be constructed by Screenplay framework logic. This is the extension method ToPerformable<TResult>(IPerformableWithResult<TResult>). Properties PerformableWithResult Gets the wrapped IPerformableWithResult<TResult> instance. public IPerformableWithResult<T> PerformableWithResult { get; } Property Value IPerformableWithResult<T> Methods GetReportFragment(IHasName) Gets a fragment of a Screenplay report, specific to the execution (performables) or gaining (abilities) of the current instance, for the specified actor. public string GetReportFragment(IHasName actor) Parameters actor IHasName An actor for whom to write the report fragment Returns string A human-readable report fragment. Examples For a performable which clicks a button (where the button itself has been constructor-injected into the performable instance), then a suitable return value might be a formatted string such as {Actor name} clicks {Button}, where the two placeholders indicated by braces: {} are substituted with the actor's Name and a string representation of the button. For a performable which reads the temperature from a thermometer, a suitable return value might be a string in the format {Actor name} reads the temperature. For an ability which allows the actor to wash dishes then a suitable return value might be a string in the format {Actor name} is able to wash the dishes. Remarks Implementers should return a string which indicates that the named actor is performing (present tense) the performable, for types which also implement a performable interface. For types which represent abilities, the implementer should return a string which indicates that the named actor is able to do something. In particular for abilities, to make them easily recognisable in reports, it helps to stick to the convention {Actor name} is able to {Ability summary}. For performables which return a value (Questions, or Tasks which behave like Questions), there is no need to include the returned value within the report fragment. The framework will include the return value in the report and will format it via a different mechanism. Good report fragments are concise. Be aware that report fragments for Tasks (which are composed from other performables) do not need to go into detail about what they do. Users reading Screenplay reports are able to drill-down into Tasks to see what they are composed from, so if the user is curious as to what the task does, it is easy to discover. It is also strongly recommended to avoid periods (full stops) at the end of a report fragment. Whilst report fragments tend to be complete sentences, punctuation like this is distracting and reports are seldom presented as paragraphs of prose. PerformAsAsync(ICanPerform, CancellationToken) Performs the action(s) are represented by the current instance. public ValueTask PerformAsAsync(ICanPerform actor, CancellationToken cancellationToken = default) Parameters actor ICanPerform The actor that is performing. cancellationToken CancellationToken An optional cancellation token by which to abort the performable. Returns ValueTask A task which completes when the performable represented by the current instance is complete. See Also PerformableExtensions"
  },
  "api/CSF.Screenplay.Performables.html": {
    "href": "api/CSF.Screenplay.Performables.html",
    "title": "Namespace CSF.Screenplay.Performables | Screenplay docs",
    "keywords": "Namespace CSF.Screenplay.Performables Classes NonGenericNoResultPerformableAdapter<T> Adapter class which allows an IPerformableWithResult<TResult> to be used as an IPerformable."
  },
  "api/CSF.Screenplay.Performance.html": {
    "href": "api/CSF.Screenplay.Performance.html",
    "title": "Class Performance | Screenplay docs",
    "keywords": "Class Performance Namespace CSF.Screenplay Assembly CSF.Screenplay.dll Primary implementation type of IPerformance. public sealed class Performance : IPerformance, IHasPerformanceIdentity, IHasServiceProvider, IDisposable, IBeginsAndEndsPerformance, IEquatable<Performance> Inheritance object Performance Implements IPerformance IHasPerformanceIdentity IHasServiceProvider IDisposable IBeginsAndEndsPerformance IEquatable<Performance> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Performance(IServiceProvider, IList<IdentifierAndName>, Guid) Initialises a new instance of Performance public Performance(IServiceProvider serviceProvider, IList<IdentifierAndName> namingHierarchy = null, Guid performanceIdentity = default) Parameters serviceProvider IServiceProvider A dependency injection service provider namingHierarchy IList<IdentifierAndName> A collection of identifiers and names providing the hierarchical name of this performance; see NamingHierarchy for more information. performanceIdentity Guid A unique identifier for the performance; if omitted (equal to Empty) then a new Guid will be generated as the identity for this performance Exceptions ArgumentNullException If serviceProvider is null Properties NamingHierarchy Gets an ordered list of identifiers which indicate the current performance's name within an organisational hierarchy. public List<IdentifierAndName> NamingHierarchy { get; } Property Value List<IdentifierAndName> Examples If the current performance is to be named Joe can take out the Trash, and it is part of a parent name, named Joe can do his chores then the first identifier in the list will be named Joe can do his chores and the second will be named Joe can take out the Trash. Remarks A Screenplay typically contains more than one performance and may contain many. It is normal to organise performances into a hierarchical structure based upon their purpose, role or relationship. The position of the current performance in that naming structure is represented by the value of this property. The ordered list of IdentifierAndName instances indicate a path from the 'root' of the hierarchy (which has no inherent name) to the current performance. Identifier/name pairs which are earlier in the collection are considered to be closer to the root, whereas latter identifier/names are branch & leaf names. In this manner, they work very similarly to .NET namespaces. The earlier in the list that a name appears, the more general it should be, representing a wider category. When using Screenplay with Integration, this hierarchy of names would typically correspond to the naming convention used by the testing framework. That might be based upon .NET namespaces, classes and test methods for a more traditional unit testing framework. Alternatively, for a BDD-style testing framework, it could be named based upon human-readable feature & scenario names. PerformanceIdentity Gets the unique IPerformance identifier public Guid PerformanceIdentity { get; } Property Value Guid Remarks This value is used to uniquely identify a performance within a CSF.Screenplay. PerformanceState Gets a value which indicates the state of the current performance. public PerformanceState PerformanceState { get; } Property Value PerformanceState See Also PerformanceState ServiceProvider Gets a service provider/resolver instance associated with this object. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods BeginPerformance() Begins the performance public void BeginPerformance() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Equals(Performance) Indicates whether the current object is equal to another object of the same type. public bool Equals(Performance other) Parameters other Performance An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. FinishPerformance(bool?) Finishes the performance with a value indicating whether or not it was a success public void FinishPerformance(bool? success) Parameters success bool? If true then the performance is to be considered a success; if false then a failure. A value of null indicates that the performance did not succeed but should not be considered a failure either. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/CSF.Screenplay.PerformanceStarter.html": {
    "href": "api/CSF.Screenplay.PerformanceStarter.html",
    "title": "Class PerformanceStarter | Screenplay docs",
    "keywords": "Class PerformanceStarter Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll Helper class for beginning the functionality of a Screenplay IPerformance from your own logic, using a fluent interface public static class PerformanceStarter Inheritance object PerformanceStarter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples Here is an example of the recommended technique for consuming this class' functionality. using static CSF.Screenplay.ScreenplayStarter; // ... then in your top-level performance logic: await Given(joe).WasAbleTo(takeOutTheTrash); Remarks This class is a convenience to aid in the readability of top-level performance logic, providing a fluent entry-point into the performance methods. Each of the methods upon this class corresponds to a PerformancePhase within the overall performance. By using these methods, the actor is down-cast to the appropriate interface that is specific to that phase, which activates appropriate functionality of the fluent interface. It is recommended to consume this functionality in your own logic via the using static directive, so that you may use the Given(Actor), When(Actor) & Then(Actor) methods stand-alone. Do not use these methods in your own Performable implementations. Doing so would reduce their reusability; use these methods only in your top-level performance logic. Any performables which are executed by one of these three methods automatically inherits the performance phase from which its top-level performable was started. Methods Given(Actor) Returns the actor instance, down-cast to ICanPerformGiven, activating the fluent interface for the Given phase of the performance. public static ICanPerformGiven Given(Actor actor) Parameters actor Actor The actor. Returns ICanPerformGiven Then(Actor) Returns the actor instance, down-cast to ICanPerformThen, activating the fluent interface for the Then phase of the performance. public static ICanPerformThen Then(Actor actor) Parameters actor Actor The actor. Returns ICanPerformThen When(Actor) Returns the actor instance, down-cast to ICanPerformWhen, activating the fluent interface for the When phase of the performance. public static ICanPerformWhen When(Actor actor) Parameters actor Actor The actor. Returns ICanPerformWhen"
  },
  "api/CSF.Screenplay.Performances.IBeginsAndEndsPerformance.html": {
    "href": "api/CSF.Screenplay.Performances.IBeginsAndEndsPerformance.html",
    "title": "Interface IBeginsAndEndsPerformance | Screenplay docs",
    "keywords": "Interface IBeginsAndEndsPerformance Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.Abstractions.dll An object which controls the beginning and ending of a performance public interface IBeginsAndEndsPerformance Methods BeginPerformance() Begins the performance void BeginPerformance() FinishPerformance(bool?) Finishes the performance with a value indicating whether or not it was a success void FinishPerformance(bool? success) Parameters success bool? If true then the performance is to be considered a success; if false then a failure. A value of null indicates that the performance did not succeed but should not be considered a failure either."
  },
  "api/CSF.Screenplay.Performances.ICreatesPerformance.html": {
    "href": "api/CSF.Screenplay.Performances.ICreatesPerformance.html",
    "title": "Interface ICreatesPerformance | Screenplay docs",
    "keywords": "Interface ICreatesPerformance Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.Abstractions.dll An object which creates instances of IPerformance; a factory service. public interface ICreatesPerformance Methods CreatePerformance() Creates a new performance instance. IPerformance CreatePerformance() Returns IPerformance A new performance instance"
  },
  "api/CSF.Screenplay.Performances.IHasPerformanceEvents.html": {
    "href": "api/CSF.Screenplay.Performances.IHasPerformanceEvents.html",
    "title": "Interface IHasPerformanceEvents | Screenplay docs",
    "keywords": "Interface IHasPerformanceEvents Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.Abstractions.dll An object which has events that public interface IHasPerformanceEvents Events BeginPerformable Occurs when an Actor begins the execution of a performable object. event EventHandler<PerformableEventArgs> BeginPerformable Event Type EventHandler<PerformableEventArgs> EndPerformable Occurs when an Actor ends the execution of a performable object. event EventHandler<PerformableEventArgs> EndPerformable Event Type EventHandler<PerformableEventArgs> GainedAbility Occurs when an Actor gains a new ability. event EventHandler<GainAbilityEventArgs> GainedAbility Event Type EventHandler<GainAbilityEventArgs> PerformableFailed Occurs when a performable object fails with an exception. event EventHandler<PerformableFailureEventArgs> PerformableFailed Event Type EventHandler<PerformableFailureEventArgs> PerformableResult Occurs when an Actor receives a result from a perfperformable objectrmance. event EventHandler<PerformableResultEventArgs> PerformableResult Event Type EventHandler<PerformableResultEventArgs> PerformanceBegun Occurs when a IPerformance begins executing. event EventHandler<PerformanceEventArgs> PerformanceBegun Event Type EventHandler<PerformanceEventArgs> PerformanceFinished Occurs when a IPerformance has finished executing. event EventHandler<PerformanceFinishedEventArgs> PerformanceFinished Event Type EventHandler<PerformanceFinishedEventArgs>"
  },
  "api/CSF.Screenplay.Performances.IRelaysPerformanceEvents.html": {
    "href": "api/CSF.Screenplay.Performances.IRelaysPerformanceEvents.html",
    "title": "Interface IRelaysPerformanceEvents | Screenplay docs",
    "keywords": "Interface IRelaysPerformanceEvents Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.Abstractions.dll An object which can relay events that relate to a IPerformance public interface IRelaysPerformanceEvents Remarks This object is used as an event sink; a single point of contact to which many objects may send events. This allows event consumers to receive events from many origins by subscribing to only a single object. Methods InvokePerformanceBegun(Guid, IList<IdentifierAndName>) Invokes an event indicating that a IPerformance has begun. void InvokePerformanceBegun(Guid performanceIdentity, IList<IdentifierAndName> namingHierarchy) Parameters performanceIdentity Guid The performance identity namingHierarchy IList<IdentifierAndName> The performance's hierarchical name InvokePerformanceFinished(Guid, IList<IdentifierAndName>, bool?) Invokes an event indicating that a IPerformance has finished. void InvokePerformanceFinished(Guid performanceIdentity, IList<IdentifierAndName> namingHierarchy, bool? success) Parameters performanceIdentity Guid The performance identity namingHierarchy IList<IdentifierAndName> The performance's hierarchical name success bool? A value indicating whether or not the performance was a success SubscribeTo(Actor) Subscribes to (and relays) events from the specified actor. void SubscribeTo(Actor actor) Parameters actor Actor The actor to which this relay should subscribe. UnsubscribeFrom(Actor) Unsubscribes from events from the specified actor. void UnsubscribeFrom(Actor actor) Parameters actor Actor The actor from which this relay should unsubscribe. Remarks This method is typically used when the actor instance is about to be disposed, such as at the end of a IPerformance. UnsubscribeFromAllActors(Guid) Unsubscribes from all of the events for all of the actors who are part of the the IPerformance, indicated by its identity. void UnsubscribeFromAllActors(Guid performanceIdentity) Parameters performanceIdentity Guid The identity of a performance. Remarks Using this method is equivalent to calling UnsubscribeFrom(Actor) for every Actor which is participating in the specified performance. Use this method when ending a performance, as a convenience to unsubscribe from all of its actors at once."
  },
  "api/CSF.Screenplay.Performances.IdentifierAndName.html": {
    "href": "api/CSF.Screenplay.Performances.IdentifierAndName.html",
    "title": "Class IdentifierAndName | Screenplay docs",
    "keywords": "Class IdentifierAndName Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.Abstractions.dll A model which indicates a unique identifier and a corresponding human-readable name. public sealed class IdentifierAndName : IEquatable<IdentifierAndName>, IHasName Inheritance object IdentifierAndName Implements IEquatable<IdentifierAndName> IHasName Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors IdentifierAndName(string, string, bool) Initialises a new instance of IdentifierAndName public IdentifierAndName(string identifier, string name = null, bool wasIdentifierAutoGenerated = false) Parameters identifier string The identifier for this item, which might not be human-readable name string A human-readable name for this item wasIdentifierAutoGenerated bool A value that indicates whether or not identifier is an auto-generated value Exceptions ArgumentNullException If identifier is null Properties Identifier Gets the identifier for the current item public string Identifier { get; } Property Value string Remarks The identifier for an item might not be a human-readable value. It is required to uniquely identify the current item, however. Name Gets a human-readable name for the current item public string Name { get; } Property Value string Remarks The human-readable name in this context is not mandatory, and so this property might return a null reference if no name was specified. WasIdentifierAutoGenerated Gets a value indicating whether or not the Identifier is an automatically-generated value or not. public bool WasIdentifierAutoGenerated { get; } Property Value bool Remarks Some integrations with Screenplay do not provide a suitable unique identifier for this position. In that case, because a unique identifier is required, Screenplay generates a unique identifier (the string representation of a GUID) automatically and uses it as the Identifier. Obviously, if that is the case then the identifier will have no meaning or correspondence to anything in the logic consuming Screenplay. This property is used to indicate when this is the case; if it is true then the Identifier was randomly-generated by Screenplay. Methods Equals(IdentifierAndName) Indicates whether the current object is equal to another object of the same type. public bool Equals(IdentifierAndName other) Parameters other IdentifierAndName An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/CSF.Screenplay.Performances.PerformanceEventArgs.html": {
    "href": "api/CSF.Screenplay.Performances.PerformanceEventArgs.html",
    "title": "Class PerformanceEventArgs | Screenplay docs",
    "keywords": "Class PerformanceEventArgs Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.Abstractions.dll A model for event arguments which relate to a scope of a IPerformance. public class PerformanceEventArgs : PerformanceScopeEventArgs, IHasPerformanceIdentity Inheritance object EventArgs PerformanceScopeEventArgs PerformanceEventArgs Implements IHasPerformanceIdentity Derived PerformanceFinishedEventArgs Inherited Members PerformanceScopeEventArgs.PerformanceIdentity EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PerformanceEventArgs(Guid, IReadOnlyList<IdentifierAndName>) Initialises a new instance of PerformanceEventArgs public PerformanceEventArgs(Guid performanceIdentity, IReadOnlyList<IdentifierAndName> namingHierarchy) Parameters performanceIdentity Guid The performance identity namingHierarchy IReadOnlyList<IdentifierAndName> The screenplay naming hierarchy Exceptions ArgumentNullException If the scenario hierarchy is null Properties NamingHierarchy Gets an ordered list of identifiers which indicate the IPerformance's name within an organisational hierarchy. public IReadOnlyList<IdentifierAndName> NamingHierarchy { get; } Property Value IReadOnlyList<IdentifierAndName> Remarks This hierarchical name has the exact same meaning and corresponds directly to NamingHierarchy. See Also IPerformance NamingHierarchy See Also IPerformance PerformanceScopeEventArgs"
  },
  "api/CSF.Screenplay.Performances.PerformanceEventBus.html": {
    "href": "api/CSF.Screenplay.Performances.PerformanceEventBus.html",
    "title": "Class PerformanceEventBus | Screenplay docs",
    "keywords": "Class PerformanceEventBus Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.dll Implementation of an event bus for performance-related events. public class PerformanceEventBus : IHasPerformanceEvents, IRelaysPerformanceEvents Inheritance object PerformanceEventBus Implements IHasPerformanceEvents IRelaysPerformanceEvents Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This object should be used as a singleton across the lifetime of a Screenplay. As an event bus object, it is both a subscriber (a sink) which can receive events. It is also a publisher, which emits events. The purpose of this object is to aggregate events from many instances of Performance and Actor over the duration/lifetime of the Screenplay. This way, consumers have only a single object to which they should subscribe in order to receive those events. Methods InvokePerformanceBegun(Guid, IList<IdentifierAndName>) Invokes an event indicating that a IPerformance has begun. public void InvokePerformanceBegun(Guid performanceIdentity, IList<IdentifierAndName> namingHierarchy) Parameters performanceIdentity Guid The performance identity namingHierarchy IList<IdentifierAndName> The performance's hierarchical name InvokePerformanceFinished(Guid, IList<IdentifierAndName>, bool?) Invokes an event indicating that a IPerformance has finished. public void InvokePerformanceFinished(Guid performanceIdentity, IList<IdentifierAndName> namingHierarchy, bool? success) Parameters performanceIdentity Guid The performance identity namingHierarchy IList<IdentifierAndName> The performance's hierarchical name success bool? A value indicating whether or not the performance was a success SubscribeTo(Actor) Subscribes to (and relays) events from the specified actor. public void SubscribeTo(Actor actor) Parameters actor Actor The actor to which this relay should subscribe. UnsubscribeFrom(Actor) Unsubscribes from events from the specified actor. public void UnsubscribeFrom(Actor actor) Parameters actor Actor The actor from which this relay should unsubscribe. Remarks This method is typically used when the actor instance is about to be disposed, such as at the end of a IPerformance. UnsubscribeFromAllActors(Guid) Unsubscribes from all of the events for all of the actors who are part of the the IPerformance, indicated by its identity. public void UnsubscribeFromAllActors(Guid performanceIdentity) Parameters performanceIdentity Guid The identity of a performance. Remarks Using this method is equivalent to calling UnsubscribeFrom(Actor) for every Actor which is participating in the specified performance. Use this method when ending a performance, as a convenience to unsubscribe from all of its actors at once. Events BeginPerformable Occurs when an Actor begins the execution of a performable object. public event EventHandler<PerformableEventArgs> BeginPerformable Event Type EventHandler<PerformableEventArgs> EndPerformable Occurs when an Actor ends the execution of a performable object. public event EventHandler<PerformableEventArgs> EndPerformable Event Type EventHandler<PerformableEventArgs> GainedAbility Occurs when an Actor gains a new ability. public event EventHandler<GainAbilityEventArgs> GainedAbility Event Type EventHandler<GainAbilityEventArgs> PerformableFailed Occurs when a performable object fails with an exception. public event EventHandler<PerformableFailureEventArgs> PerformableFailed Event Type EventHandler<PerformableFailureEventArgs> PerformableResult Occurs when an Actor receives a result from a perfperformable objectrmance. public event EventHandler<PerformableResultEventArgs> PerformableResult Event Type EventHandler<PerformableResultEventArgs> PerformanceBegun Occurs when a IPerformance begins executing. public event EventHandler<PerformanceEventArgs> PerformanceBegun Event Type EventHandler<PerformanceEventArgs> PerformanceFinished Occurs when a IPerformance has finished executing. public event EventHandler<PerformanceFinishedEventArgs> PerformanceFinished Event Type EventHandler<PerformanceFinishedEventArgs>"
  },
  "api/CSF.Screenplay.Performances.PerformanceFactory.html": {
    "href": "api/CSF.Screenplay.Performances.PerformanceFactory.html",
    "title": "Class PerformanceFactory | Screenplay docs",
    "keywords": "Class PerformanceFactory Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.dll A factory service for instances of Performance public class PerformanceFactory : ICreatesPerformance Inheritance object PerformanceFactory Implements ICreatesPerformance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PerformanceFactory(IServiceProvider) Initialises a new instance of PerformanceFactory public PerformanceFactory(IServiceProvider services) Parameters services IServiceProvider Dependency injection services Exceptions ArgumentNullException If services is null Methods CreatePerformance() Creates a new performance instance. public IPerformance CreatePerformance() Returns IPerformance A new performance instance"
  },
  "api/CSF.Screenplay.Performances.PerformanceFinishedEventArgs.html": {
    "href": "api/CSF.Screenplay.Performances.PerformanceFinishedEventArgs.html",
    "title": "Class PerformanceFinishedEventArgs | Screenplay docs",
    "keywords": "Class PerformanceFinishedEventArgs Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.Abstractions.dll A model for event arguments which relate to a finishing of a IPerformance. public class PerformanceFinishedEventArgs : PerformanceEventArgs, IHasPerformanceIdentity Inheritance object EventArgs PerformanceScopeEventArgs PerformanceEventArgs PerformanceFinishedEventArgs Implements IHasPerformanceIdentity Inherited Members PerformanceEventArgs.NamingHierarchy PerformanceScopeEventArgs.PerformanceIdentity EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PerformanceFinishedEventArgs(Guid, IReadOnlyList<IdentifierAndName>, bool?) Initialises a new instance of PerformanceEventArgs public PerformanceFinishedEventArgs(Guid performanceIdentity, IReadOnlyList<IdentifierAndName> namingHierarchy, bool? success) Parameters performanceIdentity Guid The performance identity namingHierarchy IReadOnlyList<IdentifierAndName> The scenario hierarchy success bool? A value indicating whether or not the scenario completed with a succeess result Exceptions ArgumentNullException If the scenario hierarchy is null Properties Success Gets a value indicating whether the finished IPerformance was a success or not public bool? Success { get; } Property Value bool? Remarks The three possible values for this property correspond to three possible values of PerformanceState which represent a performance that has finished. Value Corresponding state true Success false Failed null Completed When using Screenplay with Integration, these three performance states may go on to correspond to a test pass, failure or skipped/ignored test, respectively. See Also IPerformance PerformanceScopeEventArgs PerformanceEventArgs"
  },
  "api/CSF.Screenplay.Performances.PerformanceScopeEventArgs.html": {
    "href": "api/CSF.Screenplay.Performances.PerformanceScopeEventArgs.html",
    "title": "Class PerformanceScopeEventArgs | Screenplay docs",
    "keywords": "Class PerformanceScopeEventArgs Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.Abstractions.dll A model for event arguments which relate to a scope of a IPerformance. public class PerformanceScopeEventArgs : EventArgs, IHasPerformanceIdentity Inheritance object EventArgs PerformanceScopeEventArgs Implements IHasPerformanceIdentity Derived PerformanceEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This event arguments class is often used as a base for models which identify a IPerformance. Constructors PerformanceScopeEventArgs(Guid) Initializes a new instance of PerformanceScopeEventArgs public PerformanceScopeEventArgs(Guid performanceIdentity) Parameters performanceIdentity Guid The performance identity Properties PerformanceIdentity Gets the unique IPerformance identifier public Guid PerformanceIdentity { get; } Property Value Guid Remarks This value is used to uniquely identify a performance within a CSF.Screenplay. See Also IPerformance"
  },
  "api/CSF.Screenplay.Performances.PerformanceState.html": {
    "href": "api/CSF.Screenplay.Performances.PerformanceState.html",
    "title": "Enum PerformanceState | Screenplay docs",
    "keywords": "Enum PerformanceState Namespace CSF.Screenplay.Performances Assembly CSF.Screenplay.Abstractions.dll Enumerates the states of a IPerformance. public enum PerformanceState Fields Completed = 4 The performance has completed but it has neither succeeded or failed. Failed = 3 The performance has completed but it has failed. InProgress = 1 The performance has been started but is not yet complete; use FinishPerformance(bool?) to complete it. NotStarted = 0 The performance is not yet started; use BeginPerformance() to begin it. Success = 2 The performance has completed and was a success. Remarks When Screenplay is being used with Integration then this will also closely correspond to the state & outcome of the corresponding Scenario"
  },
  "api/CSF.Screenplay.Performances.html": {
    "href": "api/CSF.Screenplay.Performances.html",
    "title": "Namespace CSF.Screenplay.Performances | Screenplay docs",
    "keywords": "Namespace CSF.Screenplay.Performances Classes IdentifierAndName A model which indicates a unique identifier and a corresponding human-readable name. PerformanceEventArgs A model for event arguments which relate to a scope of a IPerformance. PerformanceEventBus Implementation of an event bus for performance-related events. PerformanceFactory A factory service for instances of Performance PerformanceFinishedEventArgs A model for event arguments which relate to a finishing of a IPerformance. PerformanceScopeEventArgs A model for event arguments which relate to a scope of a IPerformance. Interfaces IBeginsAndEndsPerformance An object which controls the beginning and ending of a performance ICreatesPerformance An object which creates instances of IPerformance; a factory service. IHasPerformanceEvents An object which has events that IRelaysPerformanceEvents An object which can relay events that relate to a IPerformance Enums PerformanceState Enumerates the states of a IPerformance."
  },
  "api/CSF.Screenplay.Screenplay.html": {
    "href": "api/CSF.Screenplay.Screenplay.html",
    "title": "Class Screenplay | Screenplay docs",
    "keywords": "Class Screenplay Namespace CSF.Screenplay Assembly CSF.Screenplay.dll An object which represents a complete execution of Screenplay logic, which should include one or more Performance instances. public sealed class Screenplay : IHasServiceProvider Inheritance object Screenplay Implements IHasServiceProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ScreenplayExtensions.ExecuteAsPerformance(Screenplay, Func<IServiceProvider, bool?>, IList<IdentifierAndName>, int) Remarks A Screenplay, when used as a noun (an instance of this class), refers to a complete execution of the Screenplay software. A Screenplay is composed of at least one Performance and typically contains many performances. When the Screenplay architecture is applied to automated testing, an instance of this class corresponds to a complete test run, where each test corresponds to a performance. End-user logic, such as test logic, rarely interacts directly with this class. That is because the Screenplay object is generally consumed only by integration logic. The Screenplay object is used to create instances of Performance via the PerformanceFactory. You may wish to read a diagram showing how screenplays, performances, actors and performables relate to one another. Constructors Screenplay(IServiceCollection) Initialises a new instance of Screenplay public Screenplay(IServiceCollection services = null) Parameters services IServiceCollection An optional dependency injection service collection Properties ServiceProvider Gets a service provider/resolver instance associated with this object. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods BeginScreenplay() Execute this method from the consuming logic in order to inform the Screenplay architecture that the Screenplay has begun. public void BeginScreenplay() CompleteScreenplay() Execute this method from the consuming logic in order to inform the Screenplay architecture that the Screenplay is now complete. public void CompleteScreenplay() ExecuteAsPerformanceAsync(Func<IServiceProvider, CancellationToken, Task<bool?>>, IList<IdentifierAndName>, CancellationToken) Executes the specified logic as a Performance public Task ExecuteAsPerformanceAsync(Func<IServiceProvider, CancellationToken, Task<bool?>> performanceLogic, IList<IdentifierAndName> namingHierarchy = null, CancellationToken cancellationToken = default) Parameters performanceLogic Func<IServiceProvider, CancellationToken, Task<bool?>> The logic to be executed by the performance. namingHierarchy IList<IdentifierAndName> An optional naming hierarchy used to identify the performance. cancellationToken CancellationToken An optional cancellation token to abort the performance logic. Returns Task A task which completes when the performance's logic has completed. Remarks This method is the primary entry point for beginning a Screenplay Performance. This method begins a new Dependency Injection Scope, and within that scope starts the performance, which executes the specified performance logic: performanceLogic. The return value from the performance logic should conform to the semantics of the parameter value passed to FinishPerformance(bool?). The namingHierarchy may be used to give the performance a name, so that its results (and subsequent report) may be identified. This parameter has the same semantics as NamingHierarchy. Exceptions ArgumentNullException If the performanceLogic is null. Events ScreenplayBegun Occurs at the beginning of a Screenplay process. public event EventHandler ScreenplayBegun Event Type EventHandler ScreenplayCompleted Occurs when the Screenplay process has completed. public event EventHandler ScreenplayCompleted Event Type EventHandler See Also Performance"
  },
  "api/CSF.Screenplay.ScreenplayExtensions.html": {
    "href": "api/CSF.Screenplay.ScreenplayExtensions.html",
    "title": "Class ScreenplayExtensions | Screenplay docs",
    "keywords": "Class ScreenplayExtensions Namespace CSF.Screenplay Assembly CSF.Screenplay.dll Extension methods for the Screenplay type. public static class ScreenplayExtensions Inheritance object ScreenplayExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExecuteAsPerformance(Screenplay, Func<IServiceProvider, bool?>, IList<IdentifierAndName>, int) Executes the specified logic as a Performance, synchronously. public static void ExecuteAsPerformance(this Screenplay screenplay, Func<IServiceProvider, bool?> performanceLogic, IList<IdentifierAndName> namingHierarchy = null, int timeoutMiliseconds = 0) Parameters screenplay Screenplay The screenplay with which to execute the logic. performanceLogic Func<IServiceProvider, bool?> The logic to be executed by the performance. namingHierarchy IList<IdentifierAndName> An optional naming hierarchy used to identify the performance. timeoutMiliseconds int If set to a non-zero positive value, then the performance logic will be aborted after the specified timeout in milliseconds. Remarks This method is the primary entry point for beginning a Screenplay Performance. This method begins a new Dependency Injection Scope, and within that scope starts the performance, which executes the specified performance logic: performanceLogic. The return value from the performance logic should conform to the semantics of the parameter value passed to FinishPerformance(bool?). The namingHierarchy may be used to give the performance a name, so that its results (and subsequent report) may be identified. This parameter has the same semantics as NamingHierarchy. Use this method only if ExecuteAsPerformanceAsync(Func<IServiceProvider, CancellationToken, Task<bool?>>, IList<IdentifierAndName>, CancellationToken) is not viable. This method executes the logic asynchronously, as is the architecture of Screenplay, but then uses Wait(CancellationToken) to convert the asynchronous result into a synchronous one. If timeoutMiliseconds is not specified, or specified with a zero value then there will be no timeout applied to the performance's logic. If specified with a positive integer then the performance logic will be aborted if the specified timeout (in milliseconds) is exceeded. Exceptions ArgumentNullException If either screenplay or performanceLogic is null. ArgumentOutOfRangeException If timeoutMiliseconds is a negative number."
  },
  "api/CSF.Screenplay.StageExtensions.html": {
    "href": "api/CSF.Screenplay.StageExtensions.html",
    "title": "Class StageExtensions | Screenplay docs",
    "keywords": "Class StageExtensions Namespace CSF.Screenplay Assembly CSF.Screenplay.Abstractions.dll Extension methods for IStage. public static class StageExtensions Inheritance object StageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Spotlight<TPersona>(IStage) Places an actor matching the specified persona into the spotlight, making them 'the current actor' on this stage. public static Actor Spotlight<TPersona>(this IStage stage) where TPersona : class, IPersona Parameters stage IStage The stage on which to spotlight the actor. Returns Actor The actor instance which was placed into the spotlight. Type Parameters TPersona A concrete type of IPersona from which to get an actor. Remarks A maximum of one actor may be in the spotlight at any time, so if a different actor is already in the spotlight as this method is used, then they will be implicitly removed and replaced by the actor derived from the persona. The actor who is in the spotlight may be retrieved by calling GetSpotlitActor(). If actor indicated by the persona is already in the spotlight then this method will have no effect, the actor will remain in the spotlight. If this method results in a new actor entering the spotlight (that is, they were not already in the spotlight) then the ActorSpotlit event will be triggered. When spotlighting a persona, the actor instance is retrieved from an ICast based upon that same persona. See GetActor(IPersona) for more information. To remove an actor from the spotlight without replacing them, use TurnSpotlightOff(). This method is the recommended way of putting an actor based upon a persona in the spotlight, as it takes care of resolving the persona from dependency injection automatically. Exceptions ArgumentNullException If the actor is null."
  },
  "api/CSF.Screenplay.html": {
    "href": "api/CSF.Screenplay.html",
    "title": "Namespace CSF.Screenplay | Screenplay docs",
    "keywords": "Namespace CSF.Screenplay Classes Actor A representation of an autonomous, or at least seemingly-autonomous, person or system which directs the events of a IPerformance. ActorExtensions Extension methods for actor types CastExtensions Extension methods for ICast. DefaultStrings An object which provides default human readable strings NoResultPerformableAdapter Adapter class which allows an IPerformableWithResult to be used as an IPerformable. NonGenericPerformableWithResultAdapter<T> Adapter class which allows an IPerformableWithResult<TResult> to be used as an IPerformableWithResult. PerformableExtensions Extension methods for performable types Performance Primary implementation type of IPerformance. PerformanceStarter Helper class for beginning the functionality of a Screenplay IPerformance from your own logic, using a fluent interface Screenplay An object which represents a complete execution of Screenplay logic, which should include one or more Performance instances. ScreenplayExtensions Extension methods for the Screenplay type. StageExtensions Extension methods for IStage. Interfaces ICanPerform An actor which may perform in the Screenplay. ICanReport A type which can provide a human-readable report fragment when it is used in a IPerformance. ICast A combined registry and factory for Actor instances, useful when coordinating multiple actors across a IPerformance IHasAbilities An object which has & is able to gain abilities. IHasName A part of a Screenplay performance which has a human-readable name. IHasPerformanceIdentity An object which provides a value which uniquely identifies the currently-executing IPerformance. IHasServiceProvider An object which has an associated IServiceProvider, which resolves services from dependency injection. IHasSubscribedActors An object which may subscribe to actor's events. IPerformable An object which represents something that a performer (typically an actor) may perform. IPerformableWithResult An object which represents something that a performer (typically an actor) may perform and which returns a result when it completes. IPerformableWithResult<TResult> An object which represents something that a performer (typically an actor) may perform and which returns a strongly-typed result when it completes. IPerformance A performance represents a self-contained scope of performables which typically results in overall success or failure. IPersona A persona is a factory for a commonly-used actor IStage The stage facilitates a contextual Actor who is 'in the spotlight' - a currently-active actor"
  },
  "docs/GettingReports.html": {
    "href": "docs/GettingReports.html",
    "title": "Screenplay reports | Screenplay docs",
    "keywords": "Screenplay reports TODO: Write this docco"
  },
  "docs/HowScreenplayAndPerformanceRelate.html": {
    "href": "docs/HowScreenplayAndPerformanceRelate.html",
    "title": "Top-down look at a screenplay | Screenplay docs",
    "keywords": "Top-down look at a screenplay The diagram below shows a top-down look at a Screenplay and how it relates to Performances, Actors and Performables. The Screenplay might itself be controlled by a Test Integration, if Screenplay is being used for automated tests. The lifetime shown, for the Performance also indicates the lifetime of the dependency injection scope. sequenceDiagram accDescr { A single instance of Screenplay runs each Performance. Each Performance contains scripts for one or more Actors. Within the Performance, the Actor(s) perform one or more Performables. The lifetime of a single performance is shown, to illustrate the DI lifetime scope. } Screenplay->>Performance: Runs each actor A as Actor activate Performance Performance->>A: Contains scripts for<br>one or more A->>Performable: Performs one<br>or more Performable-->>A: Complete A-->>Performance: Complete Performance-->>Screenplay: Complete deactivate Performance"
  },
  "docs/MakeupOfAScreenplay.html": {
    "href": "docs/MakeupOfAScreenplay.html",
    "title": "Makeup of a Screenplay | Screenplay docs",
    "keywords": "Makeup of a Screenplay \"A Screenplay\", when used as a noun, refers to a complete execution of the Screenplay software. A screenplay is comprised or one or more Performances, usually many. The diagram below shows the basic building blocks of a performance and how they interact. block-beta columns 3 Performance[\"A performance\"]:3 Actor(\"Actors\") space block:Perf columns 3 space Task[\"Tasks\"] space:4 Action[\"Actions\"] space Question[\"Questions\"] end space:3 Ability[\"Abilities\"] Actor -- \"Perform\" --> Perf Ability -- \"Has\" --> Actor Action -- \"Use\" --> Ability Question -- \"Use\" --> Ability Task -- \"Compose\" --> Action Task -- \"Compose\" --> Question style Perf fill:#E0E0F0,stroke:#C0C0E0 Explanation A performance involves one or more Actors. Each actor usually has at least one Ability. The actor performs Performables, of which there are three fundamental types: Tasks Actions Questions Actions and questions make direct use of the actor's abilities to perform their work. Tasks, on the other hand, are compositions of any of actions, questions and/or other tasks. A full Screenplay comprises of one or more performances."
  },
  "docs/ScreenplayInTheTestingStack.html": {
    "href": "docs/ScreenplayInTheTestingStack.html",
    "title": "Screenplay in the testing stack | Screenplay docs",
    "keywords": "Screenplay in the testing stack Screenplay is often used as a tool for writing automated tests. It is not a complete testing framework, though. It serves as an extension/plugin to existing testing frameworks, enhancing them with Screenplay syntax and logic. The diagram below shows where Screenplay lies within the technology stack, when it is used as a tool for testing. The dark yellow/light brown blocks show the Screenplay-specific components. The explanation below uses the NUnit test framework as an example, but this could be substituted for counterparts applicable to any test framework. block-beta columns 2 Runner[\"Test runner\"]:2 FW[\"Test framework\"]:2 Int[\"Test integration\"]:2 Test Logic[\"Screenplay test logic\"] classDef sp fill:#f0f0bb,stroke:#cc7 class Int,Logic sp The test runner This is the executable tool which runs tests. Applied to NUnit, this could be the nunit3-console.exe application. The test framework All testing framework contain some framework-specific logic of their own, which provide the basis for writing tests. Applied to NUnit, this is the NUnit.Framework.dll which is included in the NUnit NuGet package. The Test integration The Test Integration is the extension to the test framework (above) which enables the use of Screenplay-based logic in tests. Each testing framework has its own test integration, as it must be developed for the test framework's syntax and extension points. Tests The tests are normal tests written for the chosen test framework. Whilst they might be decorated with additional Screenplay-specific attributes or use Screenplay syntax, they are normal tests in the context of the test framework. Applied to NUnit, this would be your methods which look similar to: [Test] public void MyFunctionShouldReturnTrueWhenItIsTuesday() { // Test logic omitted } Screenplay test logic The logic within tests (above) which use Screenplay will be written using Screenplay's test syntax. That it, it will use Actors, Abilities and Performables. In this context, each test is a Screenplay Performance."
  },
  "docs/SuitabilityAsATestingTool.html": {
    "href": "docs/SuitabilityAsATestingTool.html",
    "title": "Where Screenplay is suitable for testing | Screenplay docs",
    "keywords": "Where Screenplay is suitable for testing The Screenplay pattern is a recommended tool for writing automated tests for application software. Unlike NUnit or SpecFlow (or many others) Screenplay is not a complete testing framework. Rather, Screenplay integrates with your chosen testing framework to assist in the writing of test logic. Screenplay is not a silver bullet; some kinds of tests could benefit from Screenplay and others will not. Some testing scenarios are listed below, along with a brief consideration as to whether Screenplay is likely to be relevant. Terminology can differ between developers, so each type of test begins with a short definition. Ideal: System tests Also known as \"end-to-end tests\"; this kind of test exercises and tests the full deployed application without the use of any test fakes. The application might be set up/configured in a controlled environment but it runs and is exercised in the same way it would in production. System tests are an ideal candidate for the use of Screenplay. System tests are often written from a user's perspective and test meaningful, observable behaviour of the application, such as a complete user story. Screenplay excels in this area of test design. Unsuitable: Unit tests Unit tests test the functionality of a small unit of code in isolation. Typically this is a single class or function. Anything external to the tested unit is replaced with a test fake or a mock. Screenplay is not recommended for use in unit testing. Unit tests are rarely written from an end-user's perspective and often do not test complete application behaviour, such as a user story. A unit test will only test only a small aspect of some functionality. When this aspect is considered in isolation it may be meaningless, or too abstract to comprehend for an end-user. Additionally: The steps involved in unit tests should be short & simple, with minimal need for code reuse or composition The steps are typically difficult to describe in the application's 'behaviour domain', only with language that a software developer would understand Perhaps useful: Integration tests Integration tests live at a point in the spectrum of testing between unit & system tests. Like unit tests, they execute logic via its programming API instead of testing the deployed application. Unlike unit tests, each integration test exercises logic across many units of code/classes. Thus, it is common for integration tests to test high-level APIs which represent complete user stories. Integration tests might include some test fakes. Usually these are limited to things which are difficult or expensive to control. Asynchronous web services & databases are typically replaced with test fakes in integration tests. For integration tests, we recommend that you evaluate for yourself whether Screenplay is useful. In some projects/applications, Screenplay will be excellent for integration tests. In others it might not. You will find Screenplay most useful if your integration tests test complete user stories. This is particularly true if the test/sample scenarios would be recognisable to end users, even if described in an abstract manner, for example without reference to a user interface. Recommended: Use BDD-style tests Screenplay is a great tool when used alongside Behaviour Driven Development (BDD). Whilst the use of a BDD framework such as SpecFlow is not at all mandatory, those familiar with BDD will quickly see the synergies with Screenplay."
  },
  "docs/TestFrameworkIntegrations.html": {
    "href": "docs/TestFrameworkIntegrations.html",
    "title": "Test framework integrations | Screenplay docs",
    "keywords": "Test framework integrations TODO: Write this docco"
  },
  "docs/dependencyInjection/DependencyInjectionScope.html": {
    "href": "docs/dependencyInjection/DependencyInjectionScope.html",
    "title": "Dependency injection scope | Screenplay docs",
    "keywords": "Dependency injection scope Developers familiar with dependency injection are likely to be familiar with the concept of DI Scopes. That is - some services which are designated as scoped or instance per scope use a common/shared instance for the lifetime/duration of the scope. Within Screenplay logic, a DI scope is automatically created, with a lifetime matching that of the current Performance. Within a performance, when any of the scoped services (listed below) are injected, each point of injection will receive the same shared instance of that service. Instances are independent per-performance; each performance gets its own shared instance of each of the listed services. List of scoped services The Cast The Stage The current performance"
  },
  "docs/dependencyInjection/InjectingServices.html": {
    "href": "docs/dependencyInjection/InjectingServices.html",
    "title": "Injecting services | Screenplay docs",
    "keywords": "Injecting services"
  },
  "docs/dependencyInjection/index.html": {
    "href": "docs/dependencyInjection/index.html",
    "title": "Dependency injection | Screenplay docs",
    "keywords": "Dependency injection TODO: Write this docco Injecting services"
  },
  "docs/nUnitTutorial/index.html": {
    "href": "docs/nUnitTutorial/index.html",
    "title": "Screenplay & NUnit tutorial | Screenplay docs",
    "keywords": "Screenplay & NUnit tutorial TODO: Write this docco"
  },
  "docs/screenplayReference/index.html": {
    "href": "docs/screenplayReference/index.html",
    "title": "Screenplay reference | Screenplay docs",
    "keywords": "Screenplay reference TODO: Write this docco Glossary of terms"
  },
  "docs/specFlowTutorial/index.html": {
    "href": "docs/specFlowTutorial/index.html",
    "title": "Screenplay & SpecFlow tutorial | Screenplay docs",
    "keywords": "Screenplay & SpecFlow tutorial TODO: Write this docco"
  },
  "glossary/Ability.html": {
    "href": "glossary/Ability.html",
    "title": "Ability | Screenplay docs",
    "keywords": "Ability An ability is an arbitrary object which may be granted to Actors in order to allow them to interact with the application as part of a Performance. Unlike many other Screenplay object-types, there is no particular interface which Abilities must implement, as their functionality, capabilities and very nature are specific to them alone. That said - it is recommended for Abilities to implement ICanReport if possible, as this allows for the production of a more pleasant human-readable report. Actions and/or Questions may interact directly with an actor's abilities in order to perform their functionality. Tasks, on the other hand, should not."
  },
  "glossary/Action.html": {
    "href": "glossary/Action.html",
    "title": "Action | Screenplay docs",
    "keywords": "Action An Action is a kind of Performable in which an Actor does something or interacts with the application in such as way as to change its state. Specifically, an action should be the smallest, most granular change or interaction possible; something which cannot reasonably be split into constituent parts. In an application of Screenplay which controls a web browser, an action might be a single mouse click, or entering some specified text into an input field. To create higher-level interactions, use Tasks to compose actions. Out of the kinds of performable, actions are the smallest building blocks available. Actions don't have a direct representation in Screenplay code because they are really just an arbitrary category of performable. Actions most commonly implement the IPerformable interface though, as they usually do not return any results. Generally, the logic of actions interacts directly with the actor's Abilities in order to provide the functionality required to perform the action."
  },
  "glossary/Feature.html": {
    "href": "glossary/Feature.html",
    "title": "Feature | Screenplay docs",
    "keywords": "Feature A Feature is a concept which is relevant when the Screenplay library is being used to perform automated tests. Each feature is a logical group of one or more related Scenarios. In Screenplay, features exist only for organising scenarios. They have no first-class representation in the code; their only appearance is within Reports. Everything related to features is handled automatically when consuming Screenplay from an appropriate Integration. Depending upon the testing framework in use, features might alternatively be named \"test fixture\" or \"test class\"."
  },
  "glossary/Integration.html": {
    "href": "glossary/Integration.html",
    "title": "Integration | Screenplay docs",
    "keywords": "Integration An Integration refers to an integration library between the Screenplay library and a framework for performing automated tests. The integration library performs the necessary scaffolding to make the Screenplay types available for dependency injection. It also deals with the association of Scenarios with Performances and the lifetime of the whole Screenplay, culminating with the production of the Report."
  },
  "glossary/Performable.html": {
    "href": "glossary/Performable.html",
    "title": "Performable | Screenplay docs",
    "keywords": "Performable A 'performable' is a verb in the language of Screenplay; performables are things that Actors do. Performables are grouped into one of three types, although these are somewhat arbitrary names which do not have direct representation in the framework. Actions are the most granular of individual interactions with the application, composable to form higher-order interactions Questions are granular, like actions, but read the application's state to get information instead of making changes Tasks are higher-order interactions which are formed by composing actions, questions and/or other tasks Actions & Questions are typically shipped by a framework; they are the fundamental building blocks from which developers create their own tasks. There are typically a discrete number of actions & questions possible for a specified application of Screenplay. Tasks, on the other hand, could be unlimited. Developers using Screenplay should write as many as they need. Tasks may represent any of the - possibly complex - interactions between the actor and the application, composing actions and/or questions and even other lower-level tasks. Actions & Questions should interact directly with the Actor's Abilities to perform their logic; in most cases Tasks should not. In Screenplay code, a Performance is a script of sorts, written from at least one performable, usually several. All performables must implement one of the following three interfaces, but it's also strongly recommended to implement ICanReport as well. It's important to understand that whilst there are three interfaces shown here and three kinds of performable listed above, there is no direct correlation between them. IPerformable IPerformableWithResult IPerformableWithResult<TResult>"
  },
  "glossary/Persona.html": {
    "href": "glossary/Persona.html",
    "title": "Persona | Screenplay docs",
    "keywords": "Persona A Persona is a class which serves as a factory for a specific Actor. In Screenplay, it is strongly recommended to create and re-use well-known Actors across your Performances. That is, if an actor with a specified Name has a certain set of Abilities in one Performance, then ideally all actors of the same name should have that same set of abilities in other performances. This leads to the creation of well-known Actors which are well-understood by the team who are working with Screenplay. Personas help facilitate that by providing a reusable location at which to set the actor's name and to assign & configure their abilities. Personas in Screenplay are classes which implement the IPersona interface."
  },
  "glossary/Question.html": {
    "href": "glossary/Question.html",
    "title": "Question | Screenplay docs",
    "keywords": "Question A Question is a kind of Performable in which an Actor gets or reads some information from the application, ideally in such a way that does not change the application's state. Similar to Actions, questions should be as small in their scope as possible, to make them as reusable and composable as possible. In code, questions get a value and return it to the consuming logic, so they will always implement one of IPerformableWithResult<TResult> or its non-generic counterpart IPerformableWithResult. In an application of Screenplay which controls a web browser, a questions might represent reading the text from a single HTML element, or reading the enabled/disabled state of a button. To create higher-level questions with broader scope, compose them with Tasks. Generally, the logic of questions interacts directly with the actor's Abilities in order to provide the functionality required to get the requested information."
  },
  "glossary/Report.html": {
    "href": "glossary/Report.html",
    "title": "Report | Screenplay docs",
    "keywords": "Report After a Screenplay has completed, the Screenplay software may produce a machine-readable report of what occurred. This report may be read, processed, stored or transformed into an alternative format as desired. The report is hierarchical; at its topmost level are Features and within are Scenarios. The scenario directly corresponds to a single Performance, and within are contained all of the Performables for that performance. Performables in a report are also included hierarchically. This means that high-level Tasks contain information about the performables from which they are composed. Reports are useful to document what has been performed in a Screenplay. They help developers diagnose and debug issues when they arise."
  },
  "glossary/Scenario.html": {
    "href": "glossary/Scenario.html",
    "title": "Scenario | Screenplay docs",
    "keywords": "Scenario A Scenario is a concept which is relevant when the Screenplay library is being used to perform automated tests. A scenario refers to a lifetime within such a testing framework or Integration. That lifetime is that of a single test, which might be called a \"test case\" or \"theory\" or perhaps \"example\" in your chosen testing framework. The lifetime of a scenario very closely corresponds to that of a Performance. Every scenario is contained within a Feature."
  },
  "glossary/Spotlight.html": {
    "href": "glossary/Spotlight.html",
    "title": "Spotlight | Screenplay docs",
    "keywords": "Spotlight When the Stage is used to get an Actor, that actor is placed in the Spotlight. That same actor remains in the spotlight until a different actor is placed there. Note, though, that a Stage and thus its corresponding Spotlight is scoped to the current Performance. A different performance has a completely independent Stage and Spotlight. A stage may be used at any time to get the actor who is currently in the spotlight. Thus, it is possible to infer an actor in Performance logic without needing to use their name. See the documentation for the Stage for more information."
  },
  "glossary/Task.html": {
    "href": "glossary/Task.html",
    "title": "Task | Screenplay docs",
    "keywords": "Task A Task is a kind of Performable which represents a high-level interaction with the application. Where Actions or Questions are highly granular for maximum reusability, tasks may be as specific as the use-case warrants. Action & question classes are often shipped with Screenplay frameworks. Tasks are typically written by the developer who is making use of Screenplay. In practice, tasks are just compositions of actions, questions or other lower-level tasks. Tasks may implement any of the three performable interfaces. To maximise their reusability, developers are advised to write tasks in a way which either: Changes the application's state Gets information from the application without changing its state This draws from the lessons that writing pure functions teaches us. In a Screenplay which controls a web application, a good example of a task is completing a registration form which involves entering data into multiple input fields. Generally, the logic of tasks does not interact with the actor's Abilities, because logic which does this is held within actions and/or questions. If a task needed to use an actor's abilities directly then that usage should likely be moved into an action or question class of its own. That action or question would then be consumed from the task."
  },
  "glossary/index.html": {
    "href": "glossary/index.html",
    "title": "Glossary | Screenplay docs",
    "keywords": "Glossary Following is a glossary of Screenplay terminology; each term is a link to its own documentation. Many of these terms are implemented directly as .NET types in the Screenplay architecture. Where applicable, the glossary item links directly to the relevant type within the API documentation. Term Summary Screenplay A complete execution of the Screenplay software Performance A single end-to-end script of performables Performable A Screenplay verb; something that an actor can do Action A kind of peformable; the lowest-level interaction that changes the state of the application Question A kind of peformable; the lowest-level interrogation that reads application state Task A composition of actions, questions and/or other tasks to create higher-level performables Actor Typically a human user of the application, directs the use of performables Ability Something that an actor is able to do or has; provides the dependencies for actions/questions Persona A factory or template for consistently creating reusable, well-known actors Cast A factory & registry for actors which facilitates managing multiple actors in a performance Stage Provides situational context; a concept of 'the currently active actor' Spotlight The currently active actor, facilitated by the stage Report An output which details every performance/scenario and the outcomes of theie performables Scenario Typically similar to a performance, this is a single test within a testing framework Feature A logical group of related scenarios, this is a test class or test fixture in some testing frameworks Integration A consumer of the Screenplay framework, such as a testing framework"
  },
  "index.html": {
    "href": "index.html",
    "title": "Screenplay pattern | Screenplay docs",
    "keywords": "Screenplay pattern Screenplay is a software design pattern to assist in the automation of complex processes. It is commonly recommended for use in writing tests using the Behaviour Driven Development (BDD) style. CSF.Screenplay is a library and framework for using this design pattern. As a testing tool Screenplay is useful for directing integration and system tests. It is commonly used/recommended for testing web applications via a web browser. In that context, Screenplay is a refinement of the Page Object Pattern. The CSF.Screenplay libraries act as a plugin to a chosen testing framework. At this time there are integrations available for SpecFlow and for NUnit. Using Screenplay Screenplay logic is written and composed using Screenplay's building blocks, which in-turn control the software. As well as improving the reusability of such logic, Screenplay also produces detailed reports. These reports provide step-by-step breakdowns, allowing quick analysis and diagnosis. Reports may also be converted to a number of formats. Tutorial: Your first test There are two step-by-step tutorials available for writing your first Screenplay test. Read the NUnit tutorial Read the SpecFlow tutorial Reference Once you understand the essentials, the Screenplay reference provides more information about how specific APIs are used. You may also be interested in the glossary of Screenplay terminology."
  }
}