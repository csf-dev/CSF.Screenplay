export class ScenarioAggregator {
    constructor(performances) {
        this.performances = performances;
    }

    getScenariosByFeature() {
        return this.performances.reduce((accumulator, performance) => {
            const names = performance.NamingHierarchy;
            const feature = names.length > 1
                ? names[0]
                : { Identifier: null, Name: "No Feature", WasIdentifierAutoGenerated: true };
            const scenario = names.length > 1
                ? names[1]
                : names.length > 0
                ? names[0]
                : { Identifier: crypto.randomUUID(), Name: "No Scenario", WasIdentifierAutoGenerated: true };
            
            const scenarioContainer = { scenario, performance };            
            const featureContainer = feature.Identifier === null
                ? accumulator.noFeatureScenarios
                : Object.hasOwn(accumulator.features, feature.Identifier)
                ? accumulator.features[feature.Identifier]
                : accumulator.features[feature.Identifier] = [];
            
            featureContainer.push(scenarioContainer);
            return accumulator;
        }, {features: {}, noFeatureScenarios: []});
    }
}

export function getScenarioAggregator(performances) {
    return new ScenarioAggregator(performances);
}