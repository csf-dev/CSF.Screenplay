import { getScenarioElementCreator } from './ScenarioElementCreator';

export class FeatureElementCreator {
    constructor(featureTemplate, scenarioElementCreator) {
        this.featureTemplate = featureTemplate;
        this.scenarioElementCreator = scenarioElementCreator;
    }

    createFeatureElement(feature) {
        const featureElement = this.featureTemplate.content.cloneNode(true);

        featureElement.querySelector('.featureName').textContent = feature.feature
            ? feature.feature.Name
            : 'No Feature name';
        featureElement.querySelector('.featureName').addEventListener('click', ev => ev.currentTarget.parentElement.classList.toggle('collapsed'));

        const featureIdentifierElement = featureElement.querySelector('.featureIdentifier');
        if (feature.feature && !feature.feature.WasIdentifierAutoGenerated)
            featureIdentifierElement.textContent = feature.feature.Identifier;
        else
            featureIdentifierElement.remove();

        const scenariosElement = featureElement.querySelector('.scenarioList');
        for (const scenario of feature.scenarios) {
            const scenarioElement = this.scenarioElementCreator.createScenarioElement(scenario);
            scenariosElement.appendChild(scenarioElement);
        }
        return featureElement;
    }
}

export function getFeatureElementCreator() {
    return new FeatureElementCreator(document.getElementById('featureTemplate'), getScenarioElementCreator());
}