import { getReportableElementCreator } from './ReportableElementCreator';
import { setContentOrRemove } from './setContentOrRemove';
import { getElementById } from '../getElementById';

export class ScenarioElementCreator {
    constructor(scenarioTemplate, reportableElementCreator) {
        this.scenarioTemplate = scenarioTemplate;
        this.reportableElementCreator = reportableElementCreator;
    }

    createScenarioElement(scenario) {
        const scenarioElement = this.scenarioTemplate.content.cloneNode(true);

        scenarioElement.querySelector('.scenarioName').textContent = scenario.scenario.Name;
        scenarioElement.querySelector('.scenarioName').addEventListener('click', ev => ev.currentTarget.parentElement.classList.toggle('collapsed'));

        setContentOrRemove(scenarioElement, scenario.scenario, '.scenarioIdentifier', s => !s.WasIdentifierAutoGenerated, s => s.Identifier);

        const reportablesElement = scenarioElement.querySelector('.reportableList');
        for (const reportable of scenario.performance.Reportables) {
            const reportableElement = this.reportableElementCreator.createReportableElement(reportable);
            reportablesElement.appendChild(reportableElement);
        }

        return scenarioElement;
    }
}

export function getScenarioElementCreator() {
    return new ScenarioElementCreator(getElementById('scenarioTemplate'), getReportableElementCreator());
}