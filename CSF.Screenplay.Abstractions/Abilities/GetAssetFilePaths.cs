using CSF.Screenplay.Reporting;

namespace CSF.Screenplay.Abilities
{
    /// <summary>
    /// Screenplay ability which gets the file system path for asset files generated by actors participating in the current performance.
    /// </summary>
    public class GetAssetFilePaths
    {
        readonly IGetsAssetFilePath pathProvider;

        /// <summary>
        /// Gets the file system path for the specified asset file.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The returned file system path is an absolute path to which the asset file should be written. The path is determined by the
        /// logic of the service <see cref="IGetsAssetFilePath"/>. This means that the final filename will not be identical to the
        /// <paramref name="baseName"/> but will include that base name within it.
        /// </para>
        /// <para>
        /// If this method returns <see langword="null" /> then the asset file should not be written to the file system.
        /// </para>
        /// </remarks>
        /// <param name="baseName">A short descriptive file name fragment for the asset file, including the file extension.</param>
        /// <returns>The asset file path.</returns>
        /// <seealso cref="IGetsAssetFilePath.GetAssetFilePath(string)"/>
        public string GetAssetFilePath(string baseName) => pathProvider.GetAssetFilePath(baseName);

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetFilePaths"/> class.
        /// </summary>
        /// <param name="pathProvider">The path provider used to get asset file paths.</param>
        public GetAssetFilePaths(IGetsAssetFilePath pathProvider)
        {
            this.pathProvider = pathProvider ?? throw new System.ArgumentNullException(nameof(pathProvider));
        }
    }
}