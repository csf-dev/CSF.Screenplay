import { ScenarioAggregator } from './ScenarioAggregator';

test('getScenariosByFeature should return an object which aggregates two scenarios into a single feature', () => {
    const performances = [
        { NamingHierarchy: [{ Identifier: "feature-1", Name: "Feature 1", WasIdentifierAutoGenerated: false }, { Identifier: "scenario-1", Name: "Scenario 1", WasIdentifierAutoGenerated: false }] },
        { NamingHierarchy: [{ Identifier: "feature-1", Name: "Feature 1", WasIdentifierAutoGenerated: false }, { Identifier: "scenario-2", Name: "Scenario 2", WasIdentifierAutoGenerated: false }] }
    ];
    const sut = new ScenarioAggregator(performances);
    const result = sut.getScenariosByFeature();
    expect(result).toEqual({
        features: {
            "feature-1": {
                feature: {
                    Identifier: "feature-1",
                    Name: "Feature 1",
                    WasIdentifierAutoGenerated: false
                },
                scenarios: [
                    {
                        scenario: {
                            Identifier: "scenario-1",
                            Name: "Scenario 1",
                            WasIdentifierAutoGenerated: false
                        },
                        performance: performances[0]
                    },
                    {
                        scenario: {
                            Identifier: "scenario-2",
                            Name: "Scenario 2",
                            WasIdentifierAutoGenerated: false
                        },
                        performance: performances[1]
                    }
                ]
            }
        },
        noFeatureScenarios: { scenarios: [] }
    });
});

test('getScenariosByFeature should return an object which correctly aggregates scenarios which belong to different features', () => {
    const performances = [
        { NamingHierarchy: [{ Identifier: "feature-1", Name: "Feature 1", WasIdentifierAutoGenerated: false }, { Identifier: "scenario-1", Name: "Scenario 1", WasIdentifierAutoGenerated: false }] },
        { NamingHierarchy: [{ Identifier: "feature-2", Name: "Feature 2", WasIdentifierAutoGenerated: false }, { Identifier: "scenario-2", Name: "Scenario 2", WasIdentifierAutoGenerated: false }] }
    ];
    const sut = new ScenarioAggregator(performances);
    const result = sut.getScenariosByFeature();
    expect(result).toEqual({
        features: {
            "feature-1": {
                feature: {
                    Identifier: "feature-1",
                    Name: "Feature 1",
                    WasIdentifierAutoGenerated: false
                },
                scenarios: [
                    {
                        scenario: {
                            Identifier: "scenario-1",
                            Name: "Scenario 1",
                            WasIdentifierAutoGenerated: false
                        },
                        performance: performances[0]
                    }
                ]
            },
            "feature-2": {
                feature: {
                    Identifier: "feature-2",
                    Name: "Feature 2",
                    WasIdentifierAutoGenerated: false
                },
                scenarios: [
                    {
                        scenario: {
                            Identifier: "scenario-2",
                            Name: "Scenario 2",
                            WasIdentifierAutoGenerated: false
                        },
                        performance: performances[1]
                    }
                ]
            }
        },
        noFeatureScenarios: { scenarios: [] }
    });
});

test('getScenariosByFeature should place a no-feature scenario into the no-feature container', () => {
    const performances = [
        { NamingHierarchy: [{ Identifier: "scenario-1", Name: "Scenario 1", WasIdentifierAutoGenerated: false }] }
    ];
    const sut = new ScenarioAggregator(performances);
    const result = sut.getScenariosByFeature();
    expect(result).toEqual({
        features: {},
        noFeatureScenarios: {
            scenarios: [
                {
                    scenario: {
                        Identifier: "scenario-1",
                        Name: "Scenario 1",
                        WasIdentifierAutoGenerated: false
                    },
                    performance: performances[0]
                }
            ]
        }
    });
});

test('getScenariosByFeature should invent a name and identifier for a scenario with no name', () => {
    const performances = [
        { NamingHierarchy: [] }
    ];
    const sut = new ScenarioAggregator(performances);
    const result = sut.getScenariosByFeature();
    expect(result).toEqual({
        features: {},
        noFeatureScenarios: {
            scenarios: [
                {
                    scenario: {
                        Identifier: expect.any(String),
                        Name: "No Scenario",
                        WasIdentifierAutoGenerated: true
                    },
                    performance: performances[0]
                }
            ]
        }
    });
});
